\" cds85xx/target.ref - Freescale MPC85XX CDS target specific documentation
\"
\" Copyright (c) 2004-2005, 2007-2010 Wind River Systems, Inc.
\"
\" The right to copy, distribute, modify or otherwise make use
\" of this software may be licensed only pursuant to the terms
\" of an applicable Wind River license agreement.
\"
\" modification history
\" --------------------
\" 01j,13dec10,y_y  update switches description
\" 01i,13jan10,pch  add vxprj support for DDR sizing
\" 01h,08dec09,pch  CQ195058: update for fixes to SDRAM setup
\" 01g,15sep09,x_f  update section of flashing bootrom using Workbench (WIND00142847)
\" 01f,07aug08,fao  update IPNET native driver description
\" 01e,24aug07,pdg  updated for vxbus pci support
\" 01d,08apr05,dtr  Now tested 64-bit mode.
\" 01c,24mar05,mdo  Documentation changes for apigen
\" 01b,22nov04,jln  updated for 1.2/0 FCS
\" 01a,12sep04,jln  Created from ads85xx/01b
\"
\"
\TITLE cds85xx - Freescale MPC85XX CDS

NAME
`Freescale MPC85XX CDS'

INTRODUCTION
This reference entry provides board-specific information necessary to run
VxWorks for the cds8555/8541 BSP.  Please read the section
"Running vxWorks" in order to configure the board to run vxWorks.

RUNNING VXWORKS
This section will guide you how to run vxWorks on the cds85xx reference 
board. The CPU Card's switch SW4[4] determines MPC8555 or MPC8541 is 
configured.

\sh 1. Setting the board Jumpers & Switches:

\sh Switch Settings - CPU Card

\ts

SW Bit->
  | 1   |  2  |  3  |  4 |  5  |  6  |  7 |  8  |
-
1 | ON  | ON  | ON  | ON | ON  | ON  | ON | OFF |
2 | ON  | OFF | OFF | ON | ON  | ON  | ON | ON  |
3 | OFF | OFF | OFF | ON | ON  | OFF | ON | OFF |
4 8555  | ON  | ON  | ON | ON  | ON  | ON | ON  | OFF
4 8541  | ON  | ON  | ON | OFF | ON  | ON | ON  | OFF
\te

\sh Switch Settings - CPU Card (CDS DAUGHTER CARD/CDC_MPC85xx rev1.1)

\ts

SW Bit->
  |  1  |  2  |  3  |  4  |  5  | 6  |  7 |  8  |
-
1 | ON  | ON  | ON  | ON  | ON  | ON | ON | ON  |
2 | ON  | OFF | OFF | ON  | ON  | ON | ON | ON  |
3 | OFF | ON  | OFF | OFF | OFF | ON | ON | OFF |
4 8555  | ON  | ON  | ON  | ON  | ON | ON | ON  | OFF
4 8541  | ON  | ON  | ON  | OFF | ON | ON | ON  | OFF
\te

\sh Switch Settings - Carrier Card 

\ts

SW Pin-> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8
-
1 | OFF | ON  | ON  | OFF | ON  | ON  | OFF | OFF
2 | OFF | OFF | ON  | OFF | ON  | ON  | OFF | OFF
3 | ON  | OFF | OFF | ON  | OFF | ON  | ON  | ON
4 | ON  | OFF | OFF | OFF | ON  | OFF | OFF | OFF
\te

\sh Switch Settings - Arcadia board (base board)

\ts

SW Pin-> | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8
-
1 | OFF | OFF | ON | ON | ON | ON | OFF | OFF
4 | ON  | ON  | ON | ON | ON | ON | ON  | ON
5 | ON  | ON  | ON | ON | ON | ON | ON  | OFF
\te

\sh 2. Flashing the bootrom image using Workbench or UBOOT 

   There are two flash banks on the cds85xx reference board. By default, 
   Freescale preprogram the UBOOT on one of flash bank with Carrier Card 
   SW2[12]=01. This section will describe how to program vxWorks's bootrom
   onto another flash bank by using WindPower ICE or UBOOT (if available).
   
   2.1 Flashing the Boot ROM Image Using Workbench:
       
       NOTE: Make sure the Carrier Card's SW2[12] are set to 00 (OFF).
                If SW2[12]=01, the UBOOT bootloader will be erased!

       2.1.1 Creating a bootrom_uncmp.hex:
             Under the cds85xx BSP directory, type "make bootrom_uncmp.hex"; 
             or Using Project Facility to build a bootrom_uncmp.hex.

       2.1.2 Install the WindPower ICE and power it on.
             Connect the JTAG interface cable from the WindPower ICE into the 
             cds85xx board JTAG (in CPU card) connector.

             Once all the connections have been made, power up the cds85xx 
             board and start Wind River ICE on the host.

       2.1.3 Configure the Workbench connection:

             Load the proper cds85xx register setting for WindRiver ICE.
             
             Once you have connected the probe to the CPU, right-click on the 
             connection in the target manager and attach to the CPU core. At 
             this point, you can go to the main Workbench Window tab at the top 
             of the view and select "show view". Browse the view list and select 
             OCD Command Shell. This launches the original BKM command shell.
             Navigate to the target manager and right-click on core. Select 
             reset and download. You can now put the register file in this BSP or 
             one provided by the installation in "play register file" 
             (for example, cds85xx.reg). Reset with IN then click the 
             reset download button. You have now loaded the target board with 
             enough settings to program the boot ROM. Select "Window > show view" 
             again and select Flash Programmer.

       2.1.4 Converting the bootrom_uncmp.hex to bootrom_uncmp.bin:

             Select the Add/Remove tab in the flash programmer. Click 
             "convert file" and navigate to the boot loader project you created 
             previously e.g. WindRiver\workspace\cds85xxBootProj\bootrom.hex. 
             Select the project. The start address should be 0x0 and the end 
             address should be set to 0xfffffff. Click "convert and add" to convert 
             the file. 
             At this point, the file is added to the list. Click on the start 
             address entry (should be 0x0) and change it to 0xfff00000. The file 
             is now ready for programming.

       2.1.5 Programming the cds85xx Flash:
       
             Select the configuration tab and choose the following device:
             'AMD -> 29LV64xDx -> 4096 x 16 -> 1 Device'.
             
             Set the base address to '0xff000000'.
             Set the start address to '0x5000'. 
             Set the size to '65536'.
             
             Select programming tab and set the following options:
             
             Set the erase from setting to '0xfff00000'.
             Set the erase to setting to '0xffffffff'.
             
             Go to OCD command shell and type IN. Be sure this returns the BKM 
             prompt and is OK. Return to the flash programmer and select the 
             Batch Program tab and then select the Initialize/Erase and Program 
             checkboxes. Click Execute.
             Wait for the programmer to complete.
             You can now run the VxWorks boot ROM by going back to the OCD command 
             shell and typing "INN" followed by "GO". Alternatively, you can 
             disconnect the ICE and proceed to Step 3 "Running the VxWorks Boot 
             ROM Program".

    2.2 Using UBOOT to flash the vxWorks's bootloader:
 
        Following instructions assume UBOOT is available on the reference 
        board, and assume FLASH base address of the second flash bank is set 
        to 0xFF00000 by UBOOT:
         
        2.2.1 Create a bootrom_uncmp.bin:
              In the BSP directory, type "make bootrom_uncmp.bin"; or
              Using Tornado's Project Facility to build a bootrom_uncmp.bin.

        2.2.2 Configure reference board and TFTP server:

              2.2.2.1 Set the Carrier Card's switch 2: SW2[12]=01. Bit 1 
                      is off and bit 2 is on. This allows UBOOT boot up 
                      the target.

              2.2.2.2 Connect a terminal to the serial port of the carrier 
                      card by using a NULL modem serial cable. Terminal parameters 
                      should be set to 115200bps, 8 data bits, no parity, and 
                      1 stop bit; Connect the Ethernet ports of the carrier 
                      card to the network.

              2.2.2.3 Set up a TFTP server in the host; copy the bootrom_uncmp.bin 
                      to the directory from which the TFTP client can download.

        2.2.3 Configure UBOOT:

              Power up the cds85xx board and hit any key in the terminal 
              to stop the autoboot of UBOOT. Set up IP addresses for this 
              target and the server. For example:

              =>setenv serverip 192.168.24.10 
              =>setenv ipaddr 192.168.24.30 
              =>saveenv 
              
              In this example, 192.168.24.10 is the IP address 
              of the TFTP server, 192.168.24.30 is the IP address 
              of the cds85xx reference board. You may also need to set up 
              a gateway and netmask if the TFTP server and the target board are not
              in the same subnet. Using "printenv" to find out other UBOOT 
              environment variable setup. "saveenv" will save the new 
              parameters on the flash.     

        2.2.4 Download and program the bootrom_uncmp.bin:

              2.2.4.1 Download the bootrom_uncmp.bin to the memory at 0x100000:

                      => tftp 100000 bootrom_uncmp.bin
          
              2.2.4.2 (optional) Back up the 1MB flash area from FF700000: 

                      NOTE: It is possible that this area contains other 
                            application such as EDINK OS. You may want to back 
                            it up before erasing. For example: 

                      => cp.b ff700000 ff300000 100000

                      to back up 1 MB FLASH from 0xFF700000 to 0xFF300000

              2.2.4.3 Erase the flash from FF700000 to FF7FFFFF:

                      => erase ff700000 ff7fffff

              2.2.4.4 Program the bootrom_uncmp.bin to the flash.

                      => cp.b 100000 ff700000 100000

              2.2.4.5 Power down the target board when flashing is done.

        2.2.5 Configure the cds855x boards to use vxWorks's boot ROM

              Set the Carrier board's switch 2: SW2[12]=00. Both bit 1 
              and 2 of switch 2 of the Carrier Card are off.

\sh 3. Running the VxWorks Boot ROM program

   3.1 Disconnect the WindPowerICE if it is still connected to the
       board, because if connected, it can stop the processor at
       the first instruction in some cases.

   3.2 Connecting the Ethernet channel and the serial channel:

       3.2.1 Connect the serial port in the carrier card to the host by 
             using a NULL modem serial cable.

       3.2.2 Second, connect the RJ45 ethernet cables to the TSEC ports
             adjacent to the serial port in the carrier card.
   
   3.3 Launch a terminal program on the host, and configures it according
       to 8 data bits, 1 stop bit, no hardware handshaking, and parity
       disabled. The baud rate is 9600 bps.

   3.4 If the board is not already powered off, turn it off momentarily.
       Power on the board,  you should see characters printed to the terminal 
       window, counting down to boot. Press any key to stop the count down. 
       Now follow the instructions in the "Getting Started" chapter of the 
       "VxWorks Programmer's Guide" for more detail on how to configure vxWorks.

\sh BOOT DEVICES
The supported boot devices are:
\cs
        mottsec - 10/100/1000 Triple Speed Ethernet Controller
        tffs - Flash. (Optional. need to reconfigure the BSP to include TFFS)
        fei - Intel PRO/100 Ethernet Controller
\ce

FEATURES
This section describes the support and unsupported features of the cds85xx

\sh SUPPORTED FEATURES


The supported features of the SBC85xx board are:
        MPC 8541/8555 processors
        Board Initialization.
        MMU support.
        Cache support.
        L2 Cache support.
        L2 SRAM support.
        Decrementer timer is used to implement a System Clock.
        Timestamp clock.
        Aux clock.
        MPC8541/8555 DUART
        On-chip 10/100/1000 Triple Speed Ethernet Controller.
        On-chip Programmable Interrupt Controller.
        DDR SDRAM (up to 512 MB Memory).
        Local bus SDRAM (up to 64 MB Memory).
        Flash (about 16 MB)
        Local bus NVRAM (about 8KB)
        Saving boot parameters on the NVRAM.
        Security Engine.
        PCI 1 host controller.
        PCI 2 host controller.
        Intel 8254x 10/100/1000 Gigabit controller

\sh Unsupported Features


The items not supported by the BSP of the cds85xx are:
        ATM channels
        FCC 10/100 Ethernet controller
        USB controller
        I2C controller
        RTC on the Maxim DS1533WP
        Devices on the base board: keyboard/mouse/harddisk/floppy/prpmc

HARDWARE DETAILS
This section documents the details of the device drivers and board
hardware elements.

\sh Devices
The chip drivers included are:
	am29lv64xdMtd.c - flash memory MTD driver for TFFS
	m85xxTimer.c - timer driver
	m85xxPci.c - On-chip PCI Bridge controller driver.
	sysEpic.c - On chip interrupt controller
	motTsecEnd.c - TSEC ethernet controller
	ns16553Sio.c - serial driver
	miiLib.c - Media Independent Interface library
	mem/byteNvRam.c - nvram driver
        sysL2Cache.c - L2 cache library

\sh Memory Maps


The following table describes the cds85xx default memory map:
\ts

Start | Size | End | Access to
------------------------------
0x0000_0000 | 256MB | 0x0FFF_FFFF | DDR SDRAM
0x5000_0000 | 64MB | 0x53FF_FFFF | PCI 1 Prefetchable Memory
0x5400_0000 | 64MB | 0x57FF_FFFF | PCI 1 Non-Prefetchable Memory
0x5800_0000 | 64MB | 0x5BFF_FFFF | PCI 1 IO 
0x6000_0000 | 64MB | 0x63FF_FFFF | PCI 2 Prefetchable Memory
0x6400_0000 | 64MB | 0x67FF_FFFF | PCI 2 Non-Prefetchable Memory
0x6800_0000 | 64MB | 0x6BFF_FFFF | PCI 2 IO 
0xF700_0000 | 16MB | 0xF7FF_FFFF | NVRAM/CADMUS
0xF800_0000 | 64MB | 0xFBFF_FFFF | LBC SDRAM
0xFE00_0000 | 1MB | 0xFE0F_FFFF | Configuration Control Registers
0xFF00_0000 | 8MB | 0xFF7F_FFFF | Flash 2
0xFF80_0000 | 8MB | 0xFFFF_FFFF | Flash 1
\te



The following table describes the default VxWorks macros which
are used to address memory
\ts

Macro Name | Macro Definition | Description
-------------------------------------------
LOCAL_MEM_LOCAL_ADRS | 0x0000_0000 | Base of RAM
RAM_LOW_ADRS | LOCAL_MEM_LOCAL_ADRS + 0x0010_0000 | VxWorks image loaded here. Stack grows down from this address.
RAM_HIGH_ADRS | LOCAL_MEM_LOCAL_ADRS + 0x00e0_0000 | VxWorks bootrom loaded here.
ROM_BASE_ADRS | 0xFFF0_0000 | Base address of ROM
ROM_TEXT_ADRS | ROM_BASE_ADRS + 0x100 | Text must start after vector table 
ROM_WARM_ADRS | ROM_TEXT_ADRS + 8 | Warm Reboot Entry Address
ROM_SIZE | 0x0010_0000 | Default 1 MByte of ROM
DDR_SDRAM_CASLAT | DDR_SDRAM_CASLAT_2_PT_5 | CAS Latency
DDR_SDRAM_ROW_ADRS_BITS | CS_ROW_BITS_13 | Number of "row" address bits
DDR_SDRAM_COL_ADRS_BITS | CS_COL_BITS_10 | Number of "column" address bits
DDR_SDRAM_PHYS_BANK_BITS | 0 | Number of address bits used to select a bank
\te

LOCAL_MEM_SIZE is computed from DDR_SDRAM_ROW_ADRS_BITS,
DDR_SDRAM_COL_ADRS_BITS, and DDR_SDRAM_PHYS_BANK_BITS.
The default settings correspond to a 256MByte DIMM which is
64 or 72 bits wide -- 8 data bytes and an optional ECC byte
-- and thus has only one physical bank, hence no address bits
are needed to select between banks.  DDR_SDRAM_PHYS_BANK_BITS
should be set to 1 if using a 128- or 144-bit wide DIMM -- 16
bytes and two optional ECC bytes -- to properly address its
two physical banks. Because some SDRAM chip does not support
hardware ECC(no ecc bank), so we undefined INCLUDE_ECC in romInit.s
by default. If you need, you can define it to support SDRAM ECC.
For further details, see Tables 9-27 and 9-28 in the
\tb MPC8555E PowerQUICC III Integrated Processor Family Manual.

If using the Project build mechanism, the values of DDR_SDRAM_CASLAT,
DDR_SDRAM_ROW_ADRS_BITS, DDR_SDRAM_COL_ADRS_BITS, and DDR_SDRAM_PHYS_BANK_BITS
can be set by selecting the corresponding components in the Kernel
Configuration editor's "memory" folder (which in turn is contained in
the "hardware" folder), or via the vxprj command-line tool, rather
than needing to edit config.h.  For example, to configure a project
for a 2GB, 144-byte DIMM with CAS latency 2.0:

\bs
$ vxprj component add INCLUDE_CS_ROW_BITS_14
$ vxprj component add INCLUDE_CS_COL_BITS_11
$ vxprj component add INCLUDE_CS_PHYS_BANK_BITS_1
$ vxprj component add INCLUDE_CASLAT_2_PT_0
\be


\sh Support for L2 Cache
L2 Cache is configured with callback function
pointers for L2 cache Global Invalidation, L2 Cache Enable, L2 Cache
Flush and L2 Cache Disable are initialized in sysHwInit().  By default, the
256 KB L2 is configured to 256 KB of cache. If a different configuration is 
desired, a new bootrom image should be used to match the RAM image 
configuration of L2.

\sh Operating Speed
The processor has built-in PLL circuits to control the operating speed of 
the Core Complex Bus (CCB) as well as the E500 core. The BSP supports both
266MHz and 333MHz for CCB. The maximum clock rate for E500 core could be up 
to 833MHz for MPC8541. Please check the SW3 switch of the CPU card for 
detail.

\cs
     CCBPLL ratio  |  SW3[5:8] |   CCB freq
     ----------------------------------------
     |  8:1        |   1000    |   266MHz   |
     ----------------------------------------
     | 10:1        |   1010    |   333MHz   |
     ----------------------------------------
\ce

\cs

     CPUPLL ratio  |  SW3[3:4]  |  CORE freq
     ----------------------------------------
     |  2:1        |    00      | 2   * CCB |
     |  5:2        |    01      | 2.5 * CCB |
     |  3:1        |    10      | 3   * CCB |
     |  7:2        |    11      | 3.5 * CCB |
     ---------------------------------------
\ce

\sh Booting
Upon reset, the MPC85xx begins executing from 0xFFFF_FFFC. Only the last
4KB of memory is mapped by the TLB.  The instruction at 0xFFFF_FFFC branches
to resetEntry() located at the last 2KB of memory to begin initialization
and mapping of memory static TLB entries.  The DDR SDRAM is then mapped to
0x0 where the vectors are setup to use and execution is then transferred
to the RAM after copying and uncompressing if necessary.

The bootrom for the cds85xx allows loading vxWorks with two TSEC ethernet 
channels. In the boot dialog, they correspond to the "mottsec0" and
the "mottsec1" devices. To switch between the two boot devices after a load
is attempted, a hard reset or power cycle is necessary in order for the 
device to function properly.  After the reset, press a key to stop the 
countdown, then use the "c" command to change the boot device to the desired 
network device.

The cds85xx bootrom can also load the vxWorks image located in the flash 
via TFFS. To include TFFS, define INCLUDE_TFFS in config.h or via the
project mechanism.
By default, the flash address FF800000 - FFEFFFFF (7MB) is configured to the 
primary TFFS. To configure the flash FF000000 - FF6FFFFFF (7MB) as the 
secondary TFFS, INCLUDE_CDS85XX_SECOND_TFFS_FLASH also needs to be defined. 
Rebuild and reflash the new bootrom with TFFS. The boot device is "tffs=0,0" 
for the primary flash, and "tffs=1,0" for the secondary flash. The vxWorks 
images need to be copied into the TFFS before booting.

\sh DDR RAM Size
The cds85xx hardware provides only one DIMM slot.
As supplied this BSP supports a 256MB DDR DIMM,
however it can support a DIMM of up to 2GB.
Change the definitions of DDR_SDRAM_CASLAT, DDR_SDRAM_ROW_ADRS_BITS,
DDR_SDRAM_COL_ADRS_BITS, and DDR_SDRAM_PHYS_BANK_BITS
to match the installed memory.

\sh Local Bus SDRAM Size
Initial boards and BSP are supplied with a 64MB SDRAM.

\sh  NVRAM Support 
This BSP uses NvRam on the 8KB Maxim DS1533WP RTC/NVRAM device. The bootline 
is stored at the beginning of the NvRam. The last 16-byte is for the RTC device.
The actual NVRAM size is (8 * 1024 - 16) = 8176 bytes.

\sh Network Configuration

The TSEC ports allows 10/100/1000T connection.
The driver will auto-negotiate and configure the port accordingly.
The BSP also supports Intel 82546/82545/82544/ 82540/82543 based NICs.
The FCC ports are not supported in this release. 


The following END and corresponding END2 drivers are supported in this BSP.
However, only END driver is enabled by default.

\ts
Driver | END                      | END2
----------------------------------------
TSEC   | INCLUDE_TSEC_VXB_END    | INCLUDE_TSEC_VXB_END2
\te

To enable the END2 driver, you should modify as follows:

For command line build, add INCLUDE_END2 into config.h right after the
definition of INCLUDE_END. Also replace the END driver name with corresponding
END2 driver name, then rebuild the bootrom and vxWorks image.

For project build under Workbench, in the Kernel Configuration Window of your
created VxWorks Image Project, add INCLUDE_END2 component and corresponding END2
component, this will un-define END automatically. Then rebuild your project.

\sh ROM Considerations
bootrom.hex is provided with this BSP. The bootrom is configured to 
a ROM base address of 0x0. When programming the bootrom to the FLASH an offset
of 0xFFF00000 need to be given.

\sh BOOT FLASH
There are two flash banks on the cds85xx board. By default, if the carrier 
card's SW2[12]=01, UBOOT would start the system. This BSP would program the 
bootrom into the flash bank with Carrier Card's SW2[12]=00. The SW2[12] is used
to swap the flash bank for booting.

\sh PCI Support

There are two PCI host controllers on MPC8555/MPC8541, both are compliant to PCI 2.2.
In the CDS85XX reference board, the primary PCI (PCI1) interface is via the Carrier 
edge fingers, and the secondary PCI (PCI2) interface is via the CPU card's right angle 
slot. The CDS reference board has ability to partition the 64-bit interface into two 
32-bit PCI interfaces, PCI1 and PCI2. The PCI 1 64-bit configuration has now been 
tested in this release.

The CPU card's SW1[7] should be set to 1 to use the SYSCLK for PCI1 clock, and 
the SW1[8] should be 0 to use PCICLK for PCI2 clock.  

The cds85xx BSP by default uses the PCI auto configuration library to only configure 
the PCI devices on the PCI bus 0 for both PCI 1 and PCI 2. Any PCI device
plugged in the PCI slot on the Arcadia board (base board) is in the bus 0 of the 
primary PCI (PCI 1). Other devices on the Arcadia board such as Floppy/Harddisk 
controllers, Keyboard/Mouse controllers, etc are on the PCI bus 0, and they are NOT 
supported.

To use the secondary PCI interface (PCI 2), the INCLUDE_CDS85XX_SECONDARY_PCI should be 
defined in config.h, and the CPU card's SW2[8] should be "off". 

The Intel 8255x fei Ethernet controllers are the only PCI devices supported in this 
release. Define INCLUDE_FEI8255X_VXB_END in config.h to enable these devices.

\sh TrueFFS
TrueFFS is an optional product to use a flash device as a file system.
To use TrueFFS, define INCLUDE_TFFS in config.h. To configure the secondary
flash (0xFF000000 - 0xFF6FFFFF) as another TFFS, INCLUDE_CDS85XX_SECOND_TFFS_FLASH 
also needs to be defined in config.h.

There are two flash banks on the cds85xx board. Each has 8 Mbytes with last 1 MByte 
for the bootloader. One contains UBOOT, the other is vxWorks's bootrom. This 
layout allows each flash has 7 MByte ready for TFFS. 

To initialize and format the primary flash device (FFF00000 - FFEFFFFF) for TFFS,
run the following commands in the shell:
\cs
    ->sysTffsFormat (0);
\ce

To initialize and format the secondary flash (FF00000 - FF6FFFFF)for TFFS, 
run the following commands in the shell:

\cs
   ->sysTffsFormat (1);
\ce

The above commands will take a few minutes to complete.  Do not
interrupt the board during this time or risk damaging the flash.
Properly formatted TFFS volumes can be mounted for use using the 
following commands each time vxWorks boots:

\cs
    /@ for primary flash @/
    usrTffsConfig (0, 0, "/tffs0/");
    /@ for secondary flash @/
    usrTffsConfig (1, 0, "/tffs1/");
\ce

TrueFFS can also serve as a boot device.  Assuming the target 
is configured to access files on the host file system, the 
following command will copy vxWorks from the host to the TFFS 
volume on the target.  Substitute /tff1/ for the secondary flash:

\cs
    copy ("vxWorks.st", "/tffs0/vxWorks.st");
\ce

To boot with a vxWorks image in the TFFS volume, build a bootrom
with INCLUDE_TFFS defined in config.h.  Program the new bootrom 
image into the boot flash and specify the following in the 
boot dialog:

\cs
    /@ for primary flash @/
    boot device: tffs=0,0
    file name  : /tffs0/vxWorks.st
    /@ for secondary flash @/
    boot device: tffs=1,0
    file name  : /tffs1/vxWorks.st
\ce

However, in this release, we don't support using TFFS utility routines 
to program the bootrom. 

\sh Serial Configuration
The UART device is configured with 8 data bits, 1 stop bit, hardware
handshaking, and parity disabled.  They operate at 9600 bps. The
on-chip DUART on the MPC8541 and MPC8555 is supported. However, only 
the second channel of the DUART is used on the cds85xx reference boards.

\sh Programmable Interrupt Controller
The PIC driver provided by this BSP supports all internal and external
interrupt sources.  It can also be configured to route such sources to
the critical interrupt pin, as well as acting as handling the critical
interrupts.  However, since critical interrupts are routed directly to
the interrupt source instead of being manager by the PIC with IACK or
EOI, the Critical Interrupt Summary registers are used to check for the
source.  The transient values in these registers causes spurious vector
when indexing into the vector table.

SPECIAL CONSIDERATIONS
This section describes miscellaneous information that the user needs
to know about the BSP.

\sh Delivered Objects
\is
\i bootrom

\i bootrom_uncmp.hex

\i bootrom_uncmp.bin

\i vxWorks

\i vxWorks.sym

\i vxWorks.st
\ie


\sh Silicon Consideration

A Tornado 2.2.1 OS patch is required for CPU errata #29.
You should ensure the patch for SPR 99776 is installed if you enable the 
instruction MMU.

KNOWN PROBLEMS

\sh Bootrom does not boot when build with GNU in Tornado 2.2.1
Tornado 2.2.1 contains a GNU makefile with missing lines.  The file is
$WIND_BASE/target/h/tool/gnu/make.PPC85XXgnu.  To verify the problem,
run "objdumpppc --headers rom_image_name" and check the .reset section.
If it does not end in 0xfffc, it is likely due to this problem.  (SPR#94153)

To correct this problem, add the following lines just before "TOOLENV = ppc"
near the end of make.PPC85XXgnu and rebuild the bootrom:

\cs
LD_SCRIPT_RAM   = -defsym wrs_kernel_rom_size=0x0$(ROM_SIZE) \
                  -T $(TGT_DIR)/h/tool/gnu/ldscripts/link.DOTBOOTRAM
LD_SCRIPT_ROM   = -defsym wrs_kernel_rom_size=0x0$(ROM_SIZE) \
                  -T $(TGT_DIR)/h/tool/gnu/ldscripts/link.DOTBOOTROM
\ce

BIBLIOGRAPHY
Please refer to the following documents for further information on the
cds85xx boards.

\tb MPC8555E PowerQuiccIII Integrated Communications Processor Family Reference Manual, Rev. 2

\tb PowerPC E500 Core Complex reference Manual 

\tb Motorola PowerPC Microprocessor Family: The Programming Environments 

\tb CDS Carrier User's Manual 

\tb CDS CPUCard User's Manual 

\tb Arcadia RapidIo Hardware Interoperability Platform Design Workbook 

\tb CDS Quick Start-Up Guide .  

