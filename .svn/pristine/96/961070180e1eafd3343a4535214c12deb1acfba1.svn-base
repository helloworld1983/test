\" wrVbP2020rdb/target.ref - WRHV Virtual Board P2020 target specific documentation
\"
\" Copyright (c) 2011,2012 Wind River Systems, Inc.
\"
\" The right to copy, distribute, modify or otherwise make use
\" of this software may be licensed only pursuant to the terms
\" of an applicable Wind River license agreement.
\"
\" modification history
\" --------------------
\" 01d,10aug12,m_h  Remove 1.3 to be agnostic to the Hypervisor revision.
\" 01c,01jun11,agf  Additional vxW 6.9.1 edits
\" 01b,22apr11,agf  Change feature support to table format; edit for vxW 6.9.1
\" 01a,15feb11,agf  Created and modified from wrVbP4080/target.ref/01a
\"
\"
\TITLE wrVbP2020rdb - WRHV Virtual Board P2020 RDB

INTRODUCTION

This reference entry provides information necessary to run VxWorks
Guest OS using the wrVbP2020rdb BSP, in Wind River Hypervisor using
the Freescale P2020-RDB reference board.

The board revision in use at the time of this writing is Revision D.

This BSP does not produce any VxWorks images that can run natively on the
fsl_p2020_rdb board. VxWorks images built with this BSP are referred to as
Guest OS images, and require the Hypervisor in order to run. Furthermore,
special versions of the PPC run-time libraries are required. These
libraries must be built from source code using VxWorks Source Build
(VSB) technology. This is required in order to build the PPC architecture
and device drivers to support the use of the Hypervisor Virtual Board
Interface (VBI), a set of system calls and macros that encapsulate a
virtual board environment.

RUNNING VXWORKS

This section provides guidelines for running VxWorks Guest OS using
the wrVbP2020rdb virtual board.

\sh Software Hierarchy

\bs
           BOOT                                 RUN TIME

                                          ---------------------------
                                          | Hypervisor system.elf   |
                                          |                         |
                                          | ---------------------   |
                                          | |  VxWorks Guest OS |   |
                                          | ---------------------   |
                                          |       |           |     |
                                          |       v           |     |
                                          | -------------     |     |
                                          | |    VBI    |     |     |
                                          | -------------     |     |
                                          |       |           |     |
                                          |       v           |     |
                                          | --------------    |     |
   ------------------------ (download)    | | Hypervisor |    |     |
   | VxWorks Boot ROM/    | ------------> | --------------    |     |
   |    Boot Loader       |               |       |           |     |
   ------------------------               --------|-----------|------
              |                                   |           |
              v                                   v           v
   ------------------------------------------------------------------
   |                Freescale P2020-RDB Hardware                    |
   ------------------------------------------------------------------

\be

As shown in the above diagram, the VxWorks boot loader is used to
initially boot the board and download a Hypervisor <system.elf>
file. This file contains the Hypervisor run time, the Virtual Board
Interface (VBI), and the VxWorks Guest Operating System. Once the
<system.elf> file is downloaded, control is transferred to the
Hypervisor, which re-initializes the physical board, and then boots
the VxWorks Guest OS and/or any other guest operating systems.
Depending on the level of virtualization, the VxWorks Guest OS
interfaces to the Hypervisor through the VBI and in some cases has
direct access to the physical hardware.

In a completely virtualized environment, an unmodified fsl_p2020_rdb VxWorks
image could run under the Hypervisor's control, and the virtual
hardware would look identical to real hardware.  This is impractical for
several reasons, including performance and the need to share access to
some hardware resources among multiple guests (e.g. MDIO).  So instead,
we employ a technique called <paravirtualization> on this target.
Essentially this means that the BSP and Architecture code is modified
to make VBI calls to perform key hardware functions such as mapping
memory, controlling interrupts, and sharing device register access. In
some cases, where a device is not shared among different guest OS
instances running on the hardware, direct hardware access is employed.

Please refer to the BIBLIOGRAPHY for more information on this subject.

\sh 1. Set Up the Hardware and VxWorks Bootrom

For information on setting up the hardware and creating a VxWorks Boot ROM,
please refer to the fsl_p2020_rdb BSP target reference. The following sections
from that document are especially relevant:

\is
\i <Setting the board Jumpers and Switches>
\i <Flashing the Boot ROM Image Using Workbench>
\i <Flashing the Boot ROM Image Using the on-board boot loader>
\i <Running the VxWorks Boot ROM Program>
\i <ROM Considerations>
\ie

\sh 2 Create and build a VSB that supports this BSP.

\cs
   $ cd $WIND_BASE/target/proj
   $ vxprj vsb create -bsp wrVbP2020rdb
\ce

Guest OS support will be selected by default, since this BSP requires
it.  Once the VSB has been created, build it.

\cs
   $ cd vsb_wrVb2020rdb
   $ make
\ce

\sh 3 Create and Build a VxWorks Image Project based on the wrVbP2020rdb VSB

\cs
   $ cd $WIND_BASE/target/proj
   $ vxprj create -vsb $WIND_BASE/target/proj/vsb_wrVbP2020rdb wrVbP2020rdb <tool>
   $ cd wrVbP2020rdb_<tool>
   $ vxprj build
\ce

Note, the <tool> specification should correspond to the choice made when
creating the VSB in the previous step. The available choices are 'e500v2diab'
for hardware floating point and 'sfdiab' for software floating point.

\sh 4 Build a Hypervisor project with the VxWorks image as payload.

Creating and building Hypervisor projects is beyond the scope of this
document. Please refer to Wind River Hypervisor User's Guide.

\sh 5 Load and boot the Hypervisor <system.elf> file using the VxWorks boot ROM

Once you have created the Hypervisor <system.elf> file, you can load and
run it using the VxWorks bootrom.


BOOT DEVICES

The supported boot devices are:
\cs
        motetsec - 10/100/1000 Triple Speed Ethernet Controller
\ce

FEATURES

This section describes all features of the board, supported or not.
It documents all configurations of the board and the interaction between
features and configuration items.

\sh List of hardware features (Freescale QorIQ P2020-RDB target board)

\ts
Hardware Interface | Controller | Driver/Component    | Status
------------------------------------------------------------------------------
UART:0             | on-chip    | vxbNs16550Sio.c     | SUPPORTED
UART:1             | on-chip    | vxbNs16550Sio.c     | UNVALIDATED
GBE L2 Switch      | VSC7385    | 'VSC7385 Firmware'  | SUPPORTED
1GB-ETHERNET:0     | on-chip    | vxbEtsecEnd.c       | SUPPORTED
1GB-ETHERNET:1     | on-chip    | vxbEtsecEnd.c       | SUPPORTED
1GB-ETHERNET:2     | on-chip    | vxbEtsecEnd.c       | SUPPORTED
NOR-FLASH          | S29GL128P  | flashMem.c          | SUPPORTED (NVRAM read-only)
NAND-FLASH         | K9F5608U0D |                     | UNSUPPORTED
TIMER              | on-chip    | vxbVbTimer.c        | SUPPORTED (system clk only)
TIMER              | on-chip    | vxbOpenPicTimer.c   | SUPPORTED (aux & timestamp)
PCI-E-HOST:0       | on-chip    | m85xxPci.c          | UNVALIDATED (mini-PCIe)
PCI-E-HOST:1       | on-chip    | m85xxPci.c          | SUPPORTED (PCIe X1 slot)
EPIC               | on-chip    |                     | UNSUPPORTED (Hypervisor)
DMA:0              | on-chip    |                     | SUPPORTED
DMA:1              | on-chip    |                     | UNVALIDATED
SPE                | on-chip    |                     | SUPPORTED
I2C                | on-chip    |                     | UNSUPPORTED
SPI                | on-chip    |                     | UNSUPPORTED
SPI-FLASH          | S25FL128P  |                     | UNSUPPORTED
RTC                | DS1339     |                     | UNSUPPORTED
USB-HOST           | on-chip    |                     | UNSUPPORTED
USB-TARGET         | on-chip    |                     | UNSUPPORTED
SD-CARD            | on-chip    |                     | UNSUPPORTED
GPIO               | on-chip    |                     | UNSUPPORTED
ENCRYPTION         | on-chip    |                     | UNSUPPORTED
\te

Please note that a hardware feature that is unsupported by this BSP
may in fact be supported by the Hypervisor. Please refer to Hypervisor
documentation for more information about Hypervisor hardware
support. See the BIBLIOGRAPHY.

HARDWARE DETAILS

This section documents the details of the device drivers and board
hardware elements.

\sh Memory Map

The memory map for the virtual board is described by Hypervisor XML
config files (e.g., vxworks.xml, wrhvConfig.xml), located in the
Hypervisor install tree ($WIND_HOME/wrhv-\<revision\>). The addresses chosen in
those configuration files must match the addresses chosen by this BSP
to access devices and locate program memory sections.

Please refer to the BIBLIOGRAPHY for more documentation on this subject
as well as target.ref in the fsl_p2020_rdb BSP.

The following memory-map reflects Rev. D hardware:

\ts

Start       | Size        | End         | Access to
-------------------------------------------------------------
0x0000_0000 | 0x0100_0000 | 0x00FF_FFFF | Virtual Board Physical Memory
0x9000_0000 | 0x1000_0000 | 0x9FFF_FFFF | PCI device BAR space
0xF300_4500 | 0x0000_1000 | 0xF300_54FF | NS16550 DUART
0xF300_8000 | 0x0000_1000 | 0xF300_8FFF | mini-PCIe slot (unverified)
0xF300_9000 | 0x0000_1000 | 0xF300_9FFF | PCIe X1 slot
0xF302_4000 | 0x0000_1000 | 0xF302_4FFF | ETSEC1
0xF302_5000 | 0x0000_1000 | 0xF302_5FFF | ETSEC2
0xF302_6000 | 0x0000_1000 | 0xF302_6FFF | ETSEC3
0xF304_1000 | 0x0000_1000 | 0xF304_1FFF | OPENPIC TIMER Group A
0xF304_2000 | 0x0000_1000 | 0xF304_2FFF | OPENPIC TIMER Group B
0xFFEE_0000 | 0x0002_0000 | 0xFFEF_FFFF | NVRAM/NOR Flash
\te

(1) Virtual Board Physical Memory is actually logical (mapped) memory
from the point of view of the hardware and the Hypervisor. To see the
real physical mapping of these addresses, enter the VB Debug Shell and
display the MMU. For example, starting from a VxWorks target shell
prompt:

\cs
-> vbiDebugShellStart


Hypervisor debug shell....
wrhv> ps
CPU 0:
ID NAME        TYPE PRI   S     IN    OUT  LOAD ADDRESS        SIZE     PC
 0 odin       THR-s   0 Rcv    284    285                             0x0015312c
 1 coreMgr0   THR-s   1 Rcv      4      4                             0x0015312c
 2 Dispatch0  THR-s   0 Rcv     69     69                             0x0015312c
 3 excMgr     THR-s   2 Rcv      1      1                             0x0015312c
 4 esh        THR-s   3 Run     70     69                             0x00143a44
 5 consMgr    THR-s   8 Rcv    124    124                             0x0015312c
 6 mdioThread THR-s   5 Rcv      4      4                             0x0015312c
 7 ns16550Start THR-s   5 Rcv      1      1                             0x0015312c
 8 mdioStart  THR-s   1 Rcv      1      1                             0x0015312c
12 vxWorks-core0  VM-u   8 Rpl   1013   1013  0x0000000009001000 8388608 0x0015312c

CPU 1:
ID NAME        TYPE PRI   S     IN    OUT  LOAD ADDRESS        SIZE     PC
 9 coreMgr1   THR-s   1 Rcv      2      2                             0x0015312c
10 Dispatch1  THR-s   0 Rcv      2      2                             0x0015312c
11 excMgr     THR-s   2 Rcv      1      1                             0x0015312c
wrhv> ctx 12

vxWorks-core0> display mmu
Page table for context 12 (vxWorks-core0):

MMU Page Table at 0x07bfc000: (L)PID 0x1
Logical           Physical          TS TID U[0123] WIMGE S[XWR] U[XWR]
----------------- ----------------- -- ---  ------ -----  -----  -----
00000000-00000fff 09001000-00000fff  1   1   0000    M     XWR    XWR
f0001000-f0001fff 07bf1000-07bf1fff  1   1   0000    M      WR      R
f0002000-f0002fff 07bf0000-07bf0fff  1   1   0000    M      WR     WR
f0003000-f0003fff 07bef000-07beffff  1   1   0000    M      WR     WR

[etc ...]

vxWorks-core0>
\ce

\sh Memory Macros

The following table lists the macros that are used to describe the
VxWorks memory map.

\ts

Macro Name | Macro Definition | Description
------------------------------
LOCAL_MEM_LOCAL_ADRS | 0x0000_0000 | Base of virtual board memory
RAM_LOW_ADRS         | 0x0001_0000 | VxWorks entry point
RAM_HIGH_ADRS        | 0x0080_0000 | Top of virtual board memory
LOCAL_MEM_SIZE       | 0x0100_0000 | Size of virtual board memory
\te

\sh Devices

The device drivers include the following:

\ts

Driver | HW Access Model | Description
--------------------------------------
vxbVbIntCtlr.c  | Paravirtual | Virtual I/O APIC Interrupt Controller
vxbVbTimer.c    | Paravirtual | Virtual Board Timer
vxbNs16550Sio.c | Direct      | Serial Port
vxbEtsecEnd.c   | Paravirtual | ETSEC Ethernet Controller
m85xxPci.c      | Direct      | PCI Express Host Bridge
gei825xxVxbEnd.c  | Direct    | Intel PRO/1000 PCI NIC
vxbOpenPicTimer.c | Direct    | Open PIC Timers
\te

<Paravirtual> drivers use the VBI to access key hardware resources,
and hence may be shared by more than one virtual board in
system. <Direct> access drivers access the hardware directly and do
not interface with the Hypervisor. <Direct> access drivers may only be
used by a single virtual board in a given system.

\sh Virtual I/O APIC Interrupt Controller (vxbVbIntCtlr.c)

This driver is paravirtualized to support the Hypervisor-provided VIO
APIC, a virtual interrupt controller modeled after the Intel I/O
Advanced Programmable Interrupt Controller (I/O APIC).

\sh Virtual Board Timer (vxbVbTimer.c)

The Virtual Board Timer driver is a vxBus-compliant timer driver that
supports the Hypervisor supplied virtual clock. In this BSP it
provides the system clock to the VxWorks Guest kernel.

\sh Serial Port (vxbNs16550Sio.c)

The UART device is configured with 8 data bits, 1 stop bit, hardware
handshaking, and parity disabled.  The device operates at 115200
bps. The on-chip DUART on the P2020rdb is supported. However, only one
channel of the DUART is used on the P2020rdb reference boards.

\sh ETSEC Ethernet Controller (vxbEtsecEnd.c)

The ETSEC port allows a 10/100/1000T connection.  The driver will
auto-negotiate and configure the port accordingly. (The MDIO acceses
performed by the ETSEC driver are paravirtualized, as there is only one
MDIO port used to access all ETSEC PHYs.)

\sh PCI Express (m85xxPci.c)

There is one PCIe X1 slot (P5) and one Mini PCIe slot (P6) on the Freescale
P2020RDB board. Only the PCIe X1 slot has been verified. Add the component
INCLUDE_PCI_BUS to the VIP to enable PCI support.

The X1 slot is connected to the PCIe 2 bridge controller. In the BSP, the
macros PCIEX2 are used to select and configure the PCIe bridge corresponding
to the X1 slot. The parameters 'lclMemAddr' and 'lclMemMapSize' of the
m85xxPci1Resources array has been set to cover all of available DRAM as
an expedient for executing in a guest environment under Hypervisor. The
lclMem space is used by the PCI devices to determine where to place DMA
buffers. Since Hypervisor is responsible for memory management, we can tell
the PCI device the entire DRAM is available, though it does mean PCI devices
must respect the memory space to which they've been allocated.

This BSP uses legacy PCI interrupts connected to the processor's external
interrupt pins. PCIe MSI interrupts are not supported for guest vxWorks.

\sh Intel PRO/1000 PCI Express NIC (gei825xxVxbEnd.c)

The Intel 8257x PCIe Gigabit Ethernet adapter is supported in this release.
Add the component INCLUDE_GEI825XX_VXB_END to the VIP to enable this device.
Further, the gei driver also requires an updated vxbDmaBufLib.c (see
WIND00259566). The updated driver is available by Wind River ESD. After
installing it, be sure to rebuild the guest VSB on which the VIP is based.

\sh Open PIC Timers (vxbOpenPicTimer.c)

This is the vxBus compliant timer driver which implements the
functionality of OpenPIC timers. On this platform, up to eight timer
instances (four per timer group) are made available to the vxBus sub-system.
Timer device instances will be assigned to auxClk, timestamp or delay timers by
the Timer Abstraction Layer.

You can also assign the timer device instances manually to auxClk and
timestamp by using the project parameters in the Kernel Configuration
tool (vxprj or Workbench). Currently there is no manual assignment for
delay timers.

The sysClk timer must be assigned to the Virtual Board Timer driver
(vxbVbTimer.c). This is required in order to take advantage of the
relative timer tick adjustment provided by the Hypervisor (in cases
where the virtual board misses one or more clock ticks).

To enable Open PIC timer support in this BSP, include either of
INCLUDE_AUX_CLK or INCLUDE_TIMESTAMP in the kernel configuration.
Additionally, to assist allocating the timers separately for concurrent
use on multiple VB's two new parameters, ENABLE_TIMER_A and ENABLE_TIMER_B,
have been created. The 'vxprj parameter set' command can be used to configure
which timer group is used by a kernel. The default build spec has
group A enabled and group B disabled.

SPECIAL CONSIDERATIONS

This section describes miscellaneous information that you need to know
before using this BSP.

\sh General

Command line builds do not work in this BSP. You must build VxWorks
images using vxprj or Workbench. Furthermore, the VxWorks Image
Project must link to a VxWorks Source Build that supports PPC Guest
OS. See the build instructions above.

SMP is not supported.

Hypervisor Virtual MMU is not supported.

Guest Real-time Processes (RTP) is not supported.

\sh Known Issues

None.

\sh Delivered Objects

There are no delivered objects for this BSP.

BIBLIOGRAPHY

For further information on VxWorks Guest OS and Hypervisor, refer to
the following documents:

\tb VxWorks Guest OS for Hypervisor Programmer's Guide

\tb Wind River Hypervisor Release Notes

\tb Wind River Hypervisor Getting Started

\tb Wind River Hypervisor User's Guide

\tb Wind River Hypervisor Virtual Board Interface Guide

\tb Wind River MIPC Programmer's Guide

\tb QorIQ P2020 Integrated Processor Reference Manual

\tb P1020E/P2020E-RDB Specification Manual

\tb Motorola PowerPC Microprocessor Family: The Programming Environments

For further information on the Freescale P2020-RDB Board, as well as bootrom
programming instructions, please see fsl_p2020_rdb/target.ref
