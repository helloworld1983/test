\" target.ref - Freescale QorIQ P5040DS target specific documentation
\"
\" Copyright (c) 2012 Wind River Systems, Inc.
\"
\" The right to copy, distribute, modify or otherwise make use
\" of this software may be licensed only pursuant to the terms
\" of an applicable Wind River license agreement.
\"
\" modification history
\" --------------------
\" 01a,04sep12,d_l  Created from fsl_p5020_ds/01j.
\"
\TITLE fsl_p5040_ds - Freescale QorIQ P5040 DS

\sh NAME
`Freescale QorIQ P5040 DS'

INTRODUCTION

This reference entry provides board-specific information necessary to run
VxWorks for the fsl_p5040_ds BSP. Please read the section "Getting 
the board running VxWorks" in order to configure the board to run VxWorks.

\sh Switches

There are 13 DIP-switches on the P5040DS board. Please make sure all
these switches are in the factory default state before using the VxWorks BSP.

Default DIP-Switch Settings for P5040DS:

\ts
Switch Number | Switch ON     | Switch OFF
---------------------------------------------
SW1           | 2,3,5,7       | 1,4,6,8
SW2           | 1,5,6,8       | 2,3,4,7
SW3           | 2,7           | 1,3,4,5,6,8
SW4           | 1,2,3,4,5,8   | 6,7
SW5           | 4,6           | 1,2,3,5,7,8
SW6           | 7,8           | 1,2,3,4,5,6
SW7           | 5,6,7,8       | 1,2,3,4
SW8           | 1,3,7         | 2,4,5,6,8
SW9           | 1,2,3         | 4,5,6,7,8
SW10          | 4             | 1,2,3,5,6,7,8
SW11          | 3,4,5,8       | 1,2,6,7
SW12          | 1,3,4,6,8     | 2,5,7
SW13          | 2,3,4,5,8     | 1,6,7
\te

\sh Getting the board running VxWorks 
This section will guide you on how to run VxWorks on the Freescale P5040DS board.

1. Creating a bootrom_uncmp.bin:

    Open the VxWorks Development Shell, change directory to fsl_p5040_ds
    BSP directory, and then build the VxWorks bootrom image.

\cs
    cd target/config/fsl_p5040_ds
    make bootrom_uncmp.bin
\ce

2. Flashing the VxWorks bootrom with U-boot

    This section will describe how to program a VxWorks bootrom into the flash
    using the pre-flashed U-Boot.

    2.1 Set the Boot Flash Switch

        Make sure U-Boot boot bank (bank#0) is selected by checking:
        SW#7[1,2,3,4] = [OFF,OFF,OFF,OFF]

    2.2 Starting a TFTP server

        Open a TFTP server on your host.  Make sure the root directory is
        your fsl_p5040_ds BSP directory which contains the VxWorks 
        bootrom image you've just created.

    2.3 Make sure your host serial port's configuration is:

        Baud Rate: 115200
        Data: 8 bit
        Parity: None
        Stop: 1 bit
        Flow Control: None

    2.4 Configuring the U-Boot environment

        Power up the board, you'll see the U-Boot shell prompt, something like:

\cs
U-Boot 2011.12-00056-gb5e3d70 (May 23 2012 - 23:57:57)

CPU0:  P5040E, Version: 1.0, (0x820c0010)
Core:  E5500, Version: 1.1, (0x80240011)
Clock Configuration:
       CPU0:1700 MHz, CPU1:1700 MHz, CPU2:1700 MHz, CPU3:1700 MHz, 
       CCB:600  MHz,
       DDR:600  MHz (1200 MT/s data rate) (Asynchronous), LBC:75   MHz
       FMAN1: 450 MHz
       FMAN2: 450 MHz
L1:    D-cache 32 kB enabled
       I-cache 32 kB enabled
Board: P5040DS, Sys ID: 0x20, Sys Ver: 0x02, FPGA Ver: 0x02, vBank: 0
36-bit Addressing
Reset Configuration Word (RCW):
       00000000: 0c580000 00000000 22121200 00000000
       00000010: 089c4400 00283000 fe800000 61000000
       00000020: 00000000 00000000 00000000 10030000
       00000030: 00000000 00000000 00000000 00000000
SERDES Reference Clocks: Bank1=100Mhz Bank2=125Mhz Bank3=125Mhz 
I2C:   ready
SPI:   ready
DRAM:  Initializing....using SPD
Detected UDIMM i-DIMM
Detected UDIMM i-DIMM
CS2 is disabled.
CS3 is disabled.
Address hashing enabled.
CS2 is disabled.
CS3 is disabled.
Address hashing enabled.
6 GiB left unmapped
8 GiB (DDR3, 64-bit, CL=8, ECC off)
       DDR Controller Interleaving Mode: cache line
       DDR Chip-Select Interleaving Mode: CS0+CS1
Testing 0x00000000 - 0x7fffffff
Testing 0x80000000 - 0xffffffff
Testing 0x100000000 - 0x17fffffff
Testing 0x180000000 - 0x1ffffffff
Remap DDR 6 GiB left unmapped

POST memory PASSED
Flash: 128 MiB
L2:    512 KB enabled
Corenet Platform Cache: 2048 KB enabled
SRIO1: disabled
SRIO2: disabled
NAND:  512 MiB
MMC:  FSL_SDHC: 0
EEPROM: Invalid ID (ff ff ff ff)
PCIe1: Root Complex, no link, regs @ 0xfe200000
PCIe1: Bus 00 - 00
PCIe2: Root Complex, no link, regs @ 0xfe201000
PCIe2: Bus 01 - 01
PCIe3: disabled
In:    serial
Out:   serial
Err:   serial
Net:   Initializing Fman
Fman1: Uploading microcode version 106.1.0
PHY reset timed out
Fman2: Uploading microcode version 106.1.0
PHY reset timed out
PHY reset timed out
PHY reset timed out
FM1@DTSEC3, FM1@DTSEC4, FM1@DTSEC5 [PRIME], FM1@TGEC1, FM2@DTSEC3, FM2@DTSEC4, FM2@DTSEC5, FM2@TGEC1
Hit any key to stop autoboot:  0 
=> 
\ce

        Type the following commands to setup the U-Boot environment.

\cs
        setenv ipaddr 192.168.0.3
        setenv netmask 255.255.255.0
        setenv serverip 192.168.0.2
        setenv gatewayip 192.168.0.1
        saveenv
\ce

        Note: This is just an example, you should change the network parameters
        according to your actual environment. 'ipaddr' is the target IP address
        while 'serverip' is your host IP address.

    2.5 Programming the Freescale P5040DS flash

        VxWorks bootrom is stored on the bank#4 of the on-board NOR flash.
        Type the following commands in the U-Boot shell.

\cs
        setenv ethact FM1@DTSEC5
        tftp 1000000 bootrom_uncmp.bin
        protect off ebf00000 +100000
        erase ebf00000 +100000
        cp.b 1000000 ebf00000 100000
        protect on ebf00000 +100000
        cmp.b 1000000 ebf00000 100000
\ce

    2.6 Copy the pre-flashed RCW to the correct location for VxWorks bootrom

\cs
        protect off ec000000 +50
        erase ec000000 +50;
        cp.b e8000000 ec000000 50
        protect on ec000000 +50
        cmp.b e8000000 ec000000 50
\ce

        Note: this step only needs to be done once, when the bootrom is loaded
        onto a new board for the first time. If the bootrom is upgraded later,
        the existing copy of the RCW can be retained.

    2.7 Change SW#7 to choose VxWorks bootrom bank (bank#4)
\cs
        SW#7[1,2,3,4] = [OFF,ON,OFF,OFF]
\ce

3. Running the VxWorks bootrom
        Power the target back on. After a few seconds, the VxWorks bootrom
        banner should appear

        If this is the first time a VxWorks bootrom has been loaded onto this
        board, use the 'M' command from the [VxWorks Boot]: prompt to set the
        MAC addresses for all of the network ports. These will be stored in
        flash.

FEATURES

This section describes all features of the board, supported or not.
It documents all configurations of the board and the interaction between
features and configuration items.

\sh List of Hardware Features (Freescale P5040DS board)

\ts
Hardware Interface | Controller | Driver/Component    | Status
--------------------------------------------------------------
UART:0             | on-chip    | vxbNs16550Sio.c     | SUPPORTED
UART:1             | on-chip    | vxbNs16550Sio.c     | SUPPORTED
UART:2             | on-chip    | vxbNs16550Sio.c     | SUPPORTED
UART:3             | on-chip    | vxbNs16550Sio.c     | SUPPORTED
DDR3               | INNODISK   | M3CP-4GMJ3C0C-M92   | SUPPORTED
1GB-ETHERNET:0     | on-chip    | vxbDtsecEnd.c       | UNVALIDATED
1GB-ETHERNET:1     | on-chip    | vxbDtsecEnd.c       | UNVALIDATED
1GB-ETHERNET:2     | on-chip    | vxbDtsecEnd.c       | SUPPORTED
1GB-ETHERNET:3     | on-chip    | vxbDtsecEnd.c       | SUPPORTED
1GB-ETHERNET:4     | on-chip    | vxbDtsecEnd.c       | SUPPORTED
1GB-ETHERNET:5     | on-chip    | vxbDtsecEnd.c       | UNVALIDATED
1GB-ETHERNET:6     | on-chip    | vxbDtsecEnd.c       | UNVALIDATED
1GB-ETHERNET:7     | on-chip    | vxbDtsecEnd.c       | SUPPORTED
1GB-ETHERNET:8     | on-chip    | vxbDtsecEnd.c       | SUPPORTED
1GB-ETHERNET:9     | on-chip    | vxbDtsecEnd.c       | SUPPORTED
10GB-ETHERNET:0    | on-chip    | vxbTgecEnd.c        | SUPPORTED
10GB-ETHERNET:1    | on-chip    | vxbTgecEnd.c        | SUPPORTED
NOR-FLASH          | S29GL01G   | 'flashMem.c'        | SUPPORTED
NAND-FLASH         | MT29F4G08  |                     | UNSUPPORTED
TIMER              | on-chip    | vxbM85xxTimer.c     | SUPPORTED
TIMER              | on-chip    | vxbOpenPicTimer.c   | SUPPORTED
PCI-E-HOST:0       | on-chip    | vxbQorIQPciEx.c     | SUPPORTED
PCI-E-HOST:1       | on-chip    | vxbQorIQPciEx.c     | UNVALIDATED
PCI-E-HOST:2       | on-chip    | vxbQorIQPciEx.c     | UNVALIDATED
DMA:0              | on-chip    | DRV_DMA_FSL         | SUPPORTED
DMA:1              | on-chip    | DRV_DMA_FSL         | SUPPORTED
I2C:0-3            | on-chip    | INCLUDE_I2C         | SUPPORTED
SPI-FLASH          | S25FL129P0 | DRV_SPI_S25FLXX     | SUPPORTED
RTC                | DS3232     | DRV_I2C_DS3232      | SUPPORTED
EEPROM             | Atmel      | DRV_I2C_EEPROM      | SUPPORTED
USB-HOST:0         | on-chip    | INCLUDE_USB         | SUPPORTED
USB-HOST:1         | on-chip    | INCLUDE_USB         | SUPPORTED
USB-TARGET:1       | on-chip    | INCLUDE_FSL_TCD     | SUPPORTED
SATA:0             | on-chip    | DRV_STORAGE_FSLSATA | SUPPORTED
SATA:1             | on-chip    | DRV_STORAGE_FSLSATA | SUPPORTED
SD-CARD            | on-chip    | DRV_STORAGE_SDHC    | SUPPORTED
SRIO               | on-chip    | -                   | UNSUPPORTED
Security Engine    | on-chip    | -                   | UNVALIDATED
Performance Monitor| on-chip    | -                   | UNSUPPORTED
\te

\sh Feature Interactions
Refer to the board vendor's documentation.

HARDWARE DETAILS

This section documents the details of the device drivers and board hardware
elements.

\sh Verified Hardware
This BSP has been verified on a P5040DS SCH-27229 REV.X2 with default clock settings.  
Note The default clock speed for P5040DS is 1.7GHz for each core, 600MHz for CCB.

\sh DDR memory selection
P5040DS supports DDR-III only, the bellows have been tested and confirmed are
noted as such.
         
\ts      
Mfg.     |Part Number        |Size |Ranks |ECC |Data Rate | Verified? | Notes
-------------------------------------------------------------------------------------
Innodisk |M3CP-4GMJ3C0C-M92  |4GB  |2     | Y  |1200      | Yes       | Or later revs 
\te

\sh Memory Maps
The default hardware memory map of this BSP is as follows:

\ts
Start       | Size  | End         | Access to
---------------------------------------------
0x0000_0000 |  2GB  | 0x7FFF_FFFF | DDR3 SDRAM
0x7FD0_0000 |  2MB  | 0x7FF0_0000 | 2MB reserved memory for QMAN hardware
0x7FF0_0000 |  1MB  | 0x7FFF_FFFF | 1MB reserved memory for BMAN hardware
0x8000_0000 |  64MB | 0x83FF_FFFF | PCIe 1 Prefetchable Memory
0x8400_0000 |  64MB | 0x87FF_FFFF | PCIe 1 Non-Prefetchable Memory
0x8800_0000 |  64MB | 0x8BFF_FFFF | PCIe 1 IO
0x8C00_0000 |  64MB | 0x8FFF_FFFF | PCIe 1 IO32
0xA000_0000 |  64MB | 0xA3FF_FFFF | PCIe 2 Prefetchable Memory
0xA400_0000 |  64MB | 0xA7FF_FFFF | PCIe 2 Non-Prefetchable Memory
0xA800_0000 |  64MB | 0xABFF_FFFF | PCIe 2 IO
0xAC00_0000 |  64MB | 0xAFFF_FFFF | PCIe 2 IO32
0xC000_0000 |  64MB | 0xC3FF_FFFF | PCIe 3 Prefetchable Memory
0xC400_0000 |  64MB | 0xC7FF_FFFF | PCIe 3 Non-Prefetchable Memory
0xC800_0000 |  64MB | 0xCBFF_FFFF | PCIe 3 IO
0xCC00_0000 |  64MB | 0xCFFF_FFFF | PCIe 3 IO32
0xF400_0000 |   2MB | 0xF41F_FFFF | BMAN
0xF420_0000 |   2MB | 0xF43F_FFFF | QMAN
0xFE00_0000 |  16MB | 0xFEFF_FFFF | CCSBAR
0xFF00_0000 |  16MB | 0xFFFF_FFFF | NOR FLASH
\te

The default software memory map of the fsl_p5040_ds BSP is as follows:

\ts
Start Addr  | End Addr    | Used for
---------------------------------------------
0x0000_0000 | 0x000F_FFFF | PHYS_MEM_START
0x0000_0000 | 0x3FFF_FFFF | (core 0) LOCAL_MEM_LOCAL_ADRS
0x0000_0100 | 0x0000_3500 | Vectors (3500 - Performance Mon)
0x0000_4100 | 0x0000_41FF | SM_ANCHOR
0x0000_4200 | 0x0000_42FF | BOOT_LINE
0x0000_4300 | 0x0000_43FF | EXC_MSG
0x0000_5000 | 0x0000_5FFF | SYSTEM_GLOBALS
0x000E_F400 | 0x000E_F414 | CPUn_SPACE(3) (if _WRS_CONFIG_SMP)
0x000E_F800 | 0x000E_F814 | CPUn_SPACE(2) (if _WRS_CONFIG_SMP)
0x000E_FC00 | 0x000E_FC14 | CPUn_SPACE(1) (if _WRS_CONFIG_SMP)
0x000F_0000 | 0x000F_0014 | CPUn_SPACE(0)        
0x000F_0014 | 0x000F_FFFF | root stack (core 0)
0x0010_0000 | 0x3FFF_FFFF | core 0 image/heap 
0x6001_0000 | 0x6008_FFFF | MIPC_SM_SYSTEM_POOL_BASE
0x7700_4400 | 0x7700_44FF | TM_ANCHOR_ADRS             
0x7800_0000 | 0x78FF_FFFF | VIRTUAL_SM_BASE
0x7FD0_0000 | 0x7FEF_FFFF | QMAN_MEM_BASE 
0x7FF0_0000 | 0x7FFF_FFFF | BMAN_MEM_BASE
------------|-------------|-----------------
0x8000_0000 | 0x8FFF_FFFF | PCIEX1_LAW_BASE
0xA000_0000 | 0xAFFF_FFFF | PCIEX2_LAW_BASE
0xC000_0000 | 0xCFFF_FFFF | PCIEX3_LAW_BASE
0xFE00_0000 | 0xFEFF_FFFF | CCSBAR
0xEFDF_0000 | 0xEFDF_0FFF | PIXIS_BASE
0xF400_0000 | 0xF41F_FFFF | BMAN_LAW_BASE
0xF420_0000 | 0xF43F_FFFF | QMAN_LAW_BASE 
0xFD00_0000 | 0xFD3F_FFFF | DCSR_LAW_BASE
0xFF00_0000 | 0xFFFF_FFFF | FLASH_BASE_ADRS
0xFFFF_FFFC |             | Reset vector (only 1, 4-K page valid).
\te

\sh Serial Configuration

UART1 as default console. If UART2 will be used, CONSOLE_TTY should be change to 
1 in config.h

Default configuration is:
    Baud Rate: 115200
    Data: 8 bit
    Parity: None
    Stop: 1 bit
    Flow Control: None

\sh Network Configuration
The DTSEC ports allow 10/100/1000 connections. The driver will auto-negotiate
and configure the port accordingly.  The BSP also supports TGEC with a 10G
connection.

The following END drivers are supported in this BSP.

\ts
Driver | END
-------------------------
DTSEC  | DRV_VXBEND_DTSEC
TGEC   | DRV_VXBEND_TGEC
\te

The P5040 processor has two frame managers. Each frame manager has 5 internal 
dtsec network controllers and a Ten Gigabit Ethernet Controller(TGEC).

These network controllers are only validated under default RCW, which SRDS_PRTCL
is 02h. That means dtsec0/1/5/6 are not validated.

By default, only dtsec4/9 are used. If other dtsecs(dtsec2/3/7/8) are needed, 
please mark SGMII_RISER_CARD_IN_USE as TRUE in config.h or in your project and 
additional SGMII riser cards are needed.

If an SGMII riser card is pluged in slot5, dtsec2/3 can be used. PORT0 on SGMII
riser card is dtsec2, PORT1 is dtsec3. 
If an SGMII riser card is pluged in slot3, dtsec7/8 can be used. PORT0 is dtsec7
while PORT1 is dtsec8. 

Using the DTSEC ports requires the DRV_VXBEND_DTSEC driver component.

FMAN also has a Ten Gigabit Ethernet Controller (TGEC), a TGEC driver is supplied.
Using the TGEC ports requires the addition of a XAUI riser card, which provides 
a single 10GBase-T media port. The default P5040DS configuration supports a XAUI 
riser card in I/O slot1 or slot2. The card in slot2 is tgec0, and the one in slot1
is tgec1. To use the TGEC in VxWorks, the DRV_VXBEND_TGEC driver 
component must be included into the project configuration. 

The XAUI media riser card supplied by Freescale has both a 10GBase-T port
and a slot for an SFP+ module, which can accommodate a 10GBase-SR fiber
module. The card is not normally supplied with a module, and the 10GBase-T
port is usually enabled by default. Support for fiber media is available,
however some caveats apply. In order to use a fiber SFP+ module, the
XAUI card must be flashed with the latest PHY firmware. If it's set to
default to 10Gbase-T, the fiber module must be enabled via software by
accessing some MDIO registers in the PHY. This requires the use of the
TGEC MDIO driver. To select fiber media, the TGEC_FIBER macros in config.h 
should be defined.

Both the DTSEC and TGEC drivers include support for jumbo frames.

\sh Ethernet Address
Six Ethernet hardware addresses are assigned to P5040DS board. A unique 
address is absolutely necessary if the user wishes to connect the board to a network.
Thus, the user must provide a suitable 6-byte Ethernet address for each on-board
network interface.

Definition of the macro ETHERNET_MAC_HANDLER in p5040ds.h indicates the MAC
address is stored in NVRAM and alterable via the 'M' bootrom command.  This
option allows only the last three bytes to be changed. To use this option,
open a console window and reset the hardware. When the bootrom banner appears
and the countdown starts, press any key to get the "[VxWorks Boot]:" prompt.
Type the 'M' command to modify the MAC address.

\sh DPAA Support

In addition to standard DTSEC and TGEC END drivers, support is also
provided for Qman, Bman and Fman DPAA components. The vxbQorIQQman,
vxbQorIQBman and vxbQorIQFman modules support the following functionality:

\is
\i User creation of Qman frame queues
\i Interrupt driven and polled Qman event handling
\i Management of Bman buffer pools
\i Use of Fman hard parser for RX checksum offload in the DTSEC and TGEC drivers
\i APIs provided to program the keygen, parser, coarse classifier and policer in the Fman
\ie

Documentation for these APIs can be found in the following files:

\is
\i target/src/hwif/resource/vxbQorIQBmanPortal.c -- Bman API
\i target/src/hwif/resource/vxbQorIQQmanPortal.c -- Qman API
\i target/src/hwif/resource/vxbQorIQQmanFman.c -- Fman API
\ie

\sh Boot Devices
The supported boot devices are:

\ts
    `dtsec4   ' | DTSEC4
    `dtsec9   ' | DTSEC9
    `fs       ' | USB/SD/SATA/TFFS
\te

\sh SMP

VxWorks SMP(Symmetric Multiprocessing) configuration can be used on this 
multiprocessor hardware platform supported by this BSP. Please refer to
the chapter "VxWorks SMP" of vxworks_kernel_programmers_guide_6.x.pdf for 
more details about the SMP-specific features from software and hardware view.

Here we list some key features of SMP.

1. SMP build

   VxWorks SMP can be configured and built using the standard Wind River
   Workbench and vxprj facilities. VxWorks SMP images cannot be created with the
   legacy BSP directory configuration and build method (using config.h and make).
   
   Workbench provides a VxWorks Image Project (VIP) option for creating VxWorks
   SMP projects. The vxprj provides the '-smp' option for configuring and building
   VxWorks SMP from the command line. For example:
\cs   
   vxprj create -smp fsl_p5040_ds diab
\ce

2. Boot loader

   Boot loader for VxWorks SMP must not be built with the SMP build option-neither 
   with Workbench nor with vxprj. In other words, you can build a bootloader using 
   command line or Workbench, just like the steps you follow in UP system, the 
   bootloader will support UP, SMP and AMP.
   
3. MMU

   VxWorks SMP does not support MMU-less configuration.
   
4. Cache and bus snoop

   Snoop logic is specific to the hardware architecture, but it's usually supported
   by a multiprocessor hardware platform. Therefore, CACHE_SNOOP_ENABLE can be used 
   in BSP to maintain the system coherency. Please refer to config.h of this BSP to 
   find how CACHE_SNOOP_ENABLE is used.
   
   Note that CACHE_SNOOP_ENABLE is required in PowerPC, ARM and IA. It doesn't make
   sense in MIPS BSP.
   
   Cache can not be disabled in a VxWorks SMP system. I.e, function cacheDisable()  
   directly returns error and does nothing.
   
   Only copy-back mode is tested and supported officially by WindRiver BSP and VxWorks
   kernel for SMP system and this is the default configuration in BSP. So system may has
   unpredictable behavior if you decide to change the cache mode from copy-back to 
   write-through. In addition, there are some other reasons for this restriction. For 
   example, write-through is not supported by VxWorks for PowerPC processors because of 
   the atomic operation, and neither does ARM because of the hardware implementation.
   
5. Interrupt CPU affinity 

   Hardware resources can be allocated via VxWorks configuration. Here we focus on the 
   interrupt to show how it's implemented. SMP hardware usually requires programmable 
   interrupt controller. VxWorks SMP makes use of this hardware to allow assignment 
   interrupts to a specific CPU. By default, interrupts are routed to the VxWorks 
   instance's logical CPU 0.
   For example, in hwconf.c of this BSP, there is the following data structure:
   
   struct intrCtlrCpu epicCpu[] = { { EPIC_XX_INT_VEC, 0 },};
   
   User can reroute the interrupt to other CPUs by changing 
   0 to 1 or any other supported CPU index.
   
6. CPU number

   VxWorks project parameter, VX_SMP_NUM_CPUS, is used to represent the CPUs which 
   get involved in the SMP system, as VxWorks supports part of all the CPUs to participate
   the SMP system and the rests keep reset or idle. The CPU number we are discussing here 
   includes all the hardware units which have the same behavior as CPU, for example, the 
   thread, hyper-thread, etc.
   
   The maximum CPU number of this BSP is 4 and this is also the possible 
   maximum value of VX_SMP_NUM_CPUS.

\sh VxWorks AMP with wrload and MIPC

You must use Workbench or vxprj to build the BSPs.  
You can build any image for CPU0 from the fsl_p5040_ds BSP.
This image is configured for AMP, wrload and MSD (MIPC serial device).
For CPUs 1-3 you can build a RAM based image (vxWorks) and is also configured
to be loaded by wrload and to route the console to CPU0.
See documentation on MIPC/wrload and MIPC Serial Device for details.

For instance, core 0 must be configured with the components to execute
as the primary CPU. 

\cs
$ cd $WIND_BASE/target/proj
$ vxprj create fsl_p5040_ds diab amp0
& vxprj component add amp0/amp0.wpj INCLUDE_AMP INCLUDE_AMP_CPU_00 INCLUDE_WRLOAD
& vxprj build amp0/amp0.wpj
\ce                            

The images for rest cores must be configured with the components to
execute as a secondary CPU. Use vxprj to add the appropriate component, 
INCLUDE_AMP_CPU_0x. Also, vxprj automatically maintains mutual exclusion 
among the CPU components. Adding a CPU component removes the pre-existing one.

\cs
$ cd $WIND_BASE/target/proj
$ vxprj create fsl_p5040_ds diab ampx
& vxprj component add ampx/ampx.wpj INCLUDE_AMP INCLUDE_AMP_CPU_0x INCLUDE_WRLOAD_IMAGE_BUILD 
& vxprj build ampx/ampx.wpj
\ce 

* Substitute x with 1 - 3 to match CPU for which this image is targeted.

The following configurations are provided as optional:

\ts
| Components
-------------------------------------------------------------
| INCLUDE_MSD INCLUDE_SHELL INCLUDE_MIPC_SM INCLUDE_MIPC_SHOW
\te

Of course, Workbench may be used instead of vxprj. Navigate the 
configuration menus thusly:
Kernel configurations: hardware -> BSP configuration variants -> VxWorks AMP core build

Boot using an image created from fsl_p5040_ds BSP using vxprj or Workbench; 
the default bootrom provided from the fsl_p5040_ds BSP may be used to boot 
this image. See the boot loader description in chapter SMP above.

Call wrload using the following either add as part of the usrAppInit or call
from a shell such as the target shell.

For Example:

-> wrload "-file <image_dir>/vxWorks -cpu 1"

wrload supports modifying the bootline using "-tsym" (highly recommended to
set the network device and CPU index correctly).
See wrload documentation for details.

\sh wrload and memory management. 

wrload, executed from the primary CPU, calls the function usrWrloadMap() to
dynamically allocate virtual memory pages in the primary CPU's context for
placing the secondary image into physical memory.  The argument to
usrWrloadMap() is 'pAddr' which is set based upon the ELF file's load memory
address (LMA) plus a physical bias.

The physical bias is compiled into the loaded image via the CDF parameter 
WRLOAD_IMAGE_BUILD_PHYS_BIAS.  The value of the parameter is stored across two
32 bit variables as (_wrload_bias_high_32 | _wrload_bias_low_32). wrload, on 
the primary CPU, reads these symbols directly from the ELF file prior to 
loading.  This physical bias is superseded by wrload's -loadbias argument
(i.e. a dynamic bias not defined at build time).  Which ever value is used, 
the result is placed into the symbol _wrload_bias.

There are a few limitations when using WRLOAD_IMAGE_BUILD_PHYS_BIAS.
If the -loadbias argument is used, the primary CPU will load the image to the
physical bias specified by -loadbias, however the secondary CPU cannot execute
the image because the sysPhysMemDesc table and sysVirtToPhys routines use the
WRLOAD_IMAGE_BUILD_PHYS_BIAS macro defined at compile-time.  If a load bias is
used, the MMU no longer uses a 1-to-1 physical-to-virtual mapping.  The ICE
may require a 1-to-1 mapping (with a physical bias of 0) to properly debug
an image.  Finally, the bootrom supports but constraints the bias to lie on
a 256MB boundary.

For secondary images the bootrom (romInit) reads a shared memory area
starting at CPUn_SPACE to get the image's stack pointer, starting address
and MMU data.  The primary image sets up CPUn_SPACE from sysAmpCpuEnable().
The usrWrload functions usrWrloadBiasHighGet() and usrWrloadBiasLowGet()
are provided for sysAmpCpuEnable() to get the _wrload_bias value and put it
into CPUn_LOCAL_MEM_ERPN and CPUn_LOCAL_MEM_RPN.  The bootrom uses RPN and
ERPN to specify the (36-bit) physical address for a 256MB mapping that the
secondary image starts running in.  The corresponding virtual address is
derrived from the CPUn_FUNC_START_ADR.  Later, as the image boots and runs
sysHwInit() this initial 256MB mapping is overwritten by sysStaticTlbDesc[].
This allows the entries in sysStaticTlbDesc[] to expand (or reduce) the
image's footprint to any workable size.

The primary image's MMU does not include a mapping for the physical area
used by the secondary image(s).  This protects the secondary image(s)
from the primary.  The primary image uses usrWrloadMap() to map a virtual
scratchpad area created just to load the image.  This area must be outside
the primary's current virtual space and is typically the lower 32-bits of
the image physical address.  However, if these lower 32-bits overlap the
primary's current virtual space an error is returned and wrload will abort.
Consequently, a fixed offset wrloadPriScratchMemOffset based on the CDF
parameter WRLOAD_PRI_SCRATCH_OFFSET is added to the lower 32-bits to generate
the virtual address.

As indicated above, the image virtual address is derrived from the start
address and should be RAM_LOW_ADRS.  The physical address is equal to
the virtual address added to the WRLOAD_IMAGE_BUILD_PHYS_BIAS.  

\sh Virtual Shared Memory
The INCLUDE_VIRTUAL_SM is optional, but it must be added to any image built 
for loading above the 32-bit boundary utilizing SMP or MIPC. This component 
sets up a virtual to physical mapping above the 1GB (default) page mapping 
SDRAM, for MIPC.

There are three configurable parameters for INCLUDE_VIRTUAL_SM: VIRTUAL_SM_BASE,
VIRTUAL_SM_BASE_PHYS, and VIRTUAL_SM_SIZE.  These specify the virtual address,
physical address, and size of the region, respectively.  These default to
0x78000000, 0x78000000, and 0x01000000.  The BSP only supports 16MB for the
size.

Note: MIPC is located in this shared memory region by default.  For this
reason, a new configurable parameter is added for the MIPC SM physical address:
MIPC_SM_SYSTEM_POOL_BASE_PHYS.  When designing a system, this physical address
should be matched with other images in the system (Linux, VxWorks, etc.).

\sh Logical Partition Support
The component INCLUDE_LOGICAL_PARTITION is provided to allow each AMP image
to have its own logical partition ID.  This is required when there is an SMP
kernel running in the system, as vxWorks SMP uses tlbivax to invalidate TLBs and
broadcast the invalidation to each of its CPUs. INCLUDE_LOGICAL_PARTITION is
automatically included when INCLUDE_AMP is selected. INCLUDE_LOGICAL_PARTITION's
configuration parameter, LOGICAL_PARTITION_ID, defaults to a unique value
based upon which INCLUDE_AMP_CPU_0x component is included.
LOGICAL_PARTITION_ID can be a value from 0 to 63.

Note: 0 indicates the global partition

\sh Boot Methods

The boot methods are affected by the boot parameters.  If no password is
specified, RSH (remote shell) protocol is used.  If a password is specified,
FTP protocol is used, or, if the flag is set to 0x80, TFTP protocol is used.

\sh PCI Express Support

The P5040 processor has a total of 3 PCI Express controllers. The P5040 DS 
factory default configuration supports PCIEX1 which is wired to slot 7. 
Use of the PCIe slots requires the DRV_PCIBUS_QORIQ_PCIEX driver component.
Adding INCLUDE_PCI_BUS with vxprj or from Workbench will automatically add 
that component, as well as INCLUDE_PCI_BUS_AUTOCONF, which is also required. 
INCLUDE_PCI_BUS_SHOW component can optionally be included to 
add PCI show routines. Any supported vxBus PCI driver should work once the QorIQ
PCI bus controller driver is present. Tests have been done with the
INCLUDE_GEI825XX_VXB_END.

The PCIe controllers are supported in root complex mode only.

This BSP defaults to use PCIe legacy interrupts. To enable PCIe MSI interrupts,
define following macro in config.h, or add it to your project using the vxprj
tool or Workbench:

\cs
    #define INCLUDE_INTCTLR_DYNAMIC_LIB
\ce

\sh DMA
The DMA Controller is supported in this release. To enable DMA functionality, 
please define following macro in config.h, or add it to your project using 
the vxprj tool or Workbench:

\cs
    #define DRV_DMA_FSL
\ce

Note: The MAX transfer size of every slice on each DMA channel should not
exceed 0x03ff_ffff (64M - 1) bytes.

\sh SD memory card controller (eSDHC)

The P5040 on chip enhanced SD host controller (eSDHC) is supported in this 
release. Both stand capacity and high capacity SD memory cards are supported,
but MMC cards are not.

To enable eSDHC support, make sure the following component is defined
in config.h before you create the VIP, or add it in your VIP dynamically.

\cs
    #define DRV_STORAGE_SDHC
\ce

Use of the internal DMA engine, and selection of interrupt vs. polled mode,
are configured by setting the values of 'dmaMode' and 'polling' in hwconf.c.
For example, to select interrupt mode and enable use of the internal DMA engine:
\cs
    /@ hwconf.c @/
    ...
    struct hcfResource sdhciResources[] = {
    ...
        { "dmaMode",             HCF_RES_INT,    { (void *)1 } },
        { "polling",             HCF_RES_INT,    { (void *)0 } },
    ...
    };
    ...
\ce

To use SD, file system configuration is usually needed. Please refer to
"Block Device File System Configuration" chapter below for more details
about how to use SD on VxWorks file system.

\sh USB

The P5040DS has two USB ports, USB1 is a host-only interface and USB2 may be a 
host or device. 

\sh 1. Host mode
To enable USB host support, make sure the following component is included
in config.h or your VIP:

\cs
#define INCLUDE_USB
\ce

Host mode has only been validated using mass storage target devices.

For more information, please refer to
\tb Wind River USB for VxWorks 6 PROGRAMMER'S GUIDE

\sh 2. Target mode
To enable the board to operate as a USB mass storage target, add the component 
or adjust the USB TCD and mass storage parameter definitions as below:

\cs

    /@ Defines for USB Device support @/

    #define INCLUDE_FSL_TCD
           
    #define FSL_USB_DR_DEVICE_IO_BASE      USB1_BASE
    #define FSL_USB_DR_DEVICE_INT_NUM      EPIC_USB_INT_VEC
    #define FSL_USB_DR_DEVICE_BE_REG       FALSE
    #define FSL_USB_DR_DEVICE_BE_DESC      FALSE
    #define FSL_USB_DR_DEVICE_BE_SETUP     TRUE
    #define FSL_USB_DR_DEVICE_SYS_CONF     TRUE
    #define FSL_USB_DR_DEVICE_BUFFER_ES    FALSE
    #define FSL_USB_DR_DEVICE_PHY_MODE     FSL_USB_DR_PHY_ULPI
    #define INCLUDE_USB_TARG
    #define INCLUDE_MS_EMULATOR
    #define INCLUDE_MS_EMULATOR_INIT

\ce

To use USB, file system configuration is usually needed. Please refer to
"Block Device File System Configuration" chapter below for more details.

\sh TrueFFS
The standard Wind River TrueFFS product is supported in this release.

This BSP uses the Spansion S29GL01GP flash as the TrueFFS media.
The FLASH address space that is used as TrueFFS is 0xff000000 - 0xff7fffff.

Note: Bootloader and TFFS are sharing the same flash part, so please be very
careful because misusing of TFFS may damage the bootloader and cause the
board failure to boot up. 

To use it, define INCLUDE_TFFS in config.h or your VIP and file system configuration 
is usually needed. Please refer to"Block Device File System Configuration" chapter 
below for more details about how to use TrueFFS device on VxWorks file system.

When using TrueFFS on a new FLASH for the first time, you should format and
configure the FLASH by using:

\cs
    sysTffsFormat ();
    usrTffsConfig (0, 0, "/tffs0");
\ce

If you are using dosFs, please use

\cs
    dosfsDiskFormat ("/tffs0");     /@ For VxWorks 6.6 and later version @/
\ce

Note: If you are running these commands in the VxWorks target shell, please use

\cs
    sp sysTffsFormat
\ce

to format the FLASH as it would take long time to complete.

\sh SATA Support

There are 2 SATA interfaces on the P5040DS board. To enable the SATA 
interfaces, make sure the following component is defined in config.h 
before you create the VIP, or add it in your VIP dynamically.

\cs
    #define DRV_STORAGE_FSLSATA
\ce

To use SATA, file system configuration is usually needed. Please refer to
"Block Device File System Configuration" chapter below for more details
about how to use SATA on VxWorks file system.

\sh Block Device File System Configuration 

Block devices such as SD/USB/SATA are usually used based on file system.
VxWorks supports 2 kinds of file system: dosFs and HRFS. Below are some 
sample component definitions which can be added in VIP to use dosFs:

\cs
    #define INCLUDE_DOSFS
    #define INCLUDE_DOSFS_MAIN
    #define INCLUDE_DOSFS_CHKDSK
    #define INCLUDE_DOSFS_FMT
    #define INCLUDE_DOSFS_FAT
    #define INCLUDE_DOSFS_SHOW
    #define INCLUDE_DOSFS_CACHE
    #define INCLUDE_DOSFS_DIR_VFAT
    #define INCLUDE_DOSFS_DIR_FIXED
    #define INCLUDE_FS_MONITOR
    #define INCLUDE_FS_EVENT_UTIL
    #define INCLUDE_ERF
    #define INCLUDE_XBD
    #define INCLUDE_XBD_BLKDEV
    #define INCLUDE_XBD_TRANS
    #define INCLUDE_DEVICE_MANAGER
    #define INCLUDE_XBD_BLK_DEV
    #define INCLUDE_XBD_PART_LIB
    #define INCLUDE_DISK_UTIL
\ce

When using a VxWorks block device for the first time, you should format it as 
a FAT file system by using
\cs
    dosFsVolFormat ("NameOfTheBlockDevice", 0x20, 0);    /@ FAT32 format @/
\ce
or
\cs
    dosFsVolFormat ("NameOfTheBlockDevice", 0x10, 0);    /@ FAT16 format @/
\ce

Then, you can use VxWorks I/O and file system commands to access the block
device as if it were a disk.  For example, you can copy a vxWorks image from
your host to the SD card by using file system copy.

\cs
    copy ("vxWorks", "NameOfTheBlockDevice/vxWorks");
\ce

NOTE. According to the current design, SD/USB/SATA may be shown with different
name in VxWorks though all of them are block devices from the perspective of 
application. To get the correct device name, use "devs" command in kernel shell:

\cs
    devs
\ce

All available devices will then be displayed with concrete name. Below are some
typical names of block devices:

\ts
/sd0:1
/bd0
/ata0:1
\te

Block device can also be used as the boot device in bootloader. 
INCLUDE_BOOT_FILESYSTEM needs to be defined in config.h or be included in your 
project.
Below is an example by using USB disk "/bd0" as a boot device:

\cs
    boot device          : fs
    unit number          : 0
    processor number     : 0
    host name            : host
    file name            : /bd0/vxWorks
    inet on ethernet (e) : 192.168.0.3:ffffff00
    host inet (h)        : 192.168.0.2
    gateway inet (g)     : 192.168.0.1
    user (u)             : target
    ftp password (pw)    : vxTarget
    flags (f)            : 0x0
    target name (tn)     :
    other (o)            : dtsec4
\ce

\sh Programmable Interrupt Controller

The PIC driver provided by this BSP supports all internal and ex
ternal
interrupt sources. The driver can also be configured to route such interrupt
sources to the critical interrupt pin. However, because critical interrupts
are routed directly to the interrupt source instead of being manager by the
PIC with IACK or EOI, the Critical Interrupt Summary registers are used to
check for the source. The transient values in these registers cause a spurious
vector when indexing into the vector table.

\sh eSPI and SPI Flash
The Freescale eSPI Controller and Spansion SPI Flash S25FLXX are supported 
(only in polled mode) in this release.

To enable this function, please define the following macro in config.h:

\cs
    #define DRV_SPI_S25FLXX
\ce

\sh I2C support

The DRV_I2CBUS_FSL driver component is used to provide access to the I2C 
controllers. Use of the I2C bus requires the INCLUDE_I2C_BUS driver component.
The EEPROM (U29/U30)devices are connected to I2C bus 0, while the RTC chip is
connected to I2C 3. The INCLUDE_EEPROMDRV driver component could be used to 
config the EEPROM as I/O device.

On I2C bus 0, the following addresses are accessible:

\cs
Address| Device           | Function
-------| -----------------| --------------------------------
0x50   | U29 Atmel 64K-bit| Primary Reset Configuration Word
0x57   | U30 Atmel 2K-bit | System Configuration Data
\ce

On I2C bus 3, the following addresses are accessible:

\cs
Address| Device            | Function
-------| ------------------| --------------------------------
0x68   |  ds3232           | RTC chip
\ce

Note: I2C device is only supported on UP mode.

\sh Make Targets
The make targets are listed as the names of object-format files. Append `.hex'
to each to derive a hex-format file name. Other images not listed here may not
be tested.

\ts
`bootrom'
`bootrom.bin'
`bootrom_uncmp'
`bootrom_uncmp.bin'
`vxWorks' (with `vxWorks.sym')
`vxWorks.st'
\te

\sh BSP Bootloaders and Bootroms

\ts
Bootloader/Bootrom   | status
----------------------------------
bootrom              | SUPPORTED
bootrom_uncmp        | SUPPORTED
bootrom_res          | UNSUPPORTED
vxWorks              | SUPPORTED
vxWorks_rom          | UNSUPPORTED
vxWorks_romCompress  | SUPPORTED
vxWorks_romResident  | UNSUPPORTED
\te

Note: The default size of the vxWorks_rom images are larger than the default 
ROM_SIZE of 1MB, so vxWorks_rom are not supported. However, it can be supported
by adjusted ROM_SIZE and the corresponding addresses in config.h and Makefile 
to fit these image.

\sh BSP Validated Tools

\ts
Tool                         | Connection/Type | Status
-------------------------------------------------------
Workbench Debugger           | ETHERNET/WDB    | UNVALIDATED
Workbench System Viewer      | ETHERNET/WDB    | UNVALIDATED
Workbench MemScope           | ETHERNET/WDB    | UNVALIDATED
Workbench ProfileScope       | ETHERNET/WDB    | UNVALIDATED
Workbench StethoScope        | ETHERNET/WDB    | UNVALIDATED
Workbench CoverageScope      | ETHERNET/WDB    | UNVALIDATED
Workbench Core File Analysis | ETHERNET/WDB    | UNVALIDATED
Workbench Sensor Points      | ETHERNET/WDB    | UNVALIDATED
Workbench OCD Debugger       | JTAG            | UNSUPPORTED
\te

\sh Known Issues

The P5040 errata A-004529: Phantom Branch triggered by floating point
instruction can cause core to stall until interrupted.
The issue is only in rev 1 silicon and should be fixed in rev 1.1 and newer 
versions.
             
The workaround for the issue will turn off branch prediction. So the performance
will be decreased. The workaround is disabled by default for performance.
Please enable the workaround by defining FREESCALE_ERRATA_A004529_WORKAROUND_ENABLE
in the file config.h if you hit the the errata.

Sata disk can not be identified after warm reboot. A defect WIND00376524 is filed
to track this issue. It fails sometimes when running dosFsVolFormat on Sata disk, 
especially in SMP project. A defect WIND00377175 is filed to track this issue.

BOARD LAYOUT

\bs
+------------------------------------------------------------------------------+
|___                               _____________________      |  ATX   |       |
|___| USB                   DDR   |_____________________|     |________|       |
|______                           ______________________                       |
|      |                    DDR   |_____________________|                      |
|  SD  |                                                                       |
|______|                                                                       |
|__ __                                                                         |
|  |  | bottom: UART0                   __________                             |
|__|__|    top: UART1                  |         |                             |
|__            _                       |  P5040  |                             |
|  | Dtsec9   | | SATA0                |         |                             |
|__|          |_|                      |_________|                             |
|_USB_        | | SATA1                                                        |
|  |  |       |_|                                                              |
|__|__|Dtsec4                                                                  |
|  _________________                                                           |
| |_________________| slot7                                                    |
|  _________________                                                           |
| |_________________| slot6                                                    |
|  _________________                                                           |
| |_________________| slot5                                                    |
|  _________________                                 ________                  |
| |_________________| slot4                         |__JTAG__|                 |
|  _________________                                                           |
| |_________________| slot3                                                    |
|  _________________                                                           |
| |_________________| slot1                  __        __  ____ ____           |
|                                      SW13 |__|      |__| |__| |__|SW9-11     |
| |_________________| slot2                  __        __  ____ ____ ____      |
|  _________________                   SW12 |__| SW5-8|__| |__| |_7| |__|      |
| |_________________| slot1                            __  ____ ____ ____      |
|                                                SW1-4|__| |__| |__| |__|      |
+------------------------------------------------------------------------------+
\be

BIBLIOGRAPHY
For further information on the fsl_p5040_ds, refer to the following
documents:

\tb P5040 DS Hardware User Guide 

\tb P5040DS Development System Schematics Rev X2

\tb P5040 Hardware Getting Started Guide

\tb P5040 QorIQ Integrated Multicore Communication Processor Reference Manual

\tb e5500 Core Reference Manual

\tb e500mc Core Reference Manual

SEE ALSO

\tb Workbench User's Guide: Introduction

\tb VxWorks Programmer's Guide: Configuration

\tb VxWorks Programmer's Guide: Architecture Appendix

