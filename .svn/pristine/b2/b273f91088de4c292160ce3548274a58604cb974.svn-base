\" amcc_taishan/target.ref - amcc_440gx(AMCC PPC440GX evaluation board) target specific documentation
\"
\" Copyright (c) 2007-2008,2010 Wind River Systems, Inc.
\"
\" The right to copy, distribute, modify or otherwise make use
\" of this software may be licensed only pursuant to the terms
\" of an applicable Wind River license agreement.
\"
\" modification history
\" --------------------
\" 01h,09sep10,kab  ROM build size issues
\" 01g,16dec08,b_m  update for vxbus timer & uic drivers.
\" 01f,07oct08,syt  Added description for PCIX interface and systerm power supply. 
\" 01e,02sep08,x_f  Removed sysDcr.s description
\" 01d,13aug08,x_s  Removed ocd register file from bsp directory.
\" 01c,30jul08,x_s  Updated for getting the board running VxWorks.
\" 01b,11dec07,x_s  Changed to use vxBus driver.
\" 01a,11apr07,x_s  Written based on ocotea target.ref
\"
\TITLE amcc_taishan - AMCC PPC440GX EVB

NAME `AMCC PPC440GX EVB - amcc_taishan'

INTRODUCTION
This manual entry provides board-specific information necessary to run
VxWorks on the AMCC PPC440GX Evaluation Board, using the amcc_taishan Board
Support Package. Before using a board with VxWorks, verify that the
board runs in the factory configuration check with AMCC for the latest
silicon errata for your particular revision/device.

This BSP supports PowerPC 440GX Rev F.  

\sh Boot ROMs
The AMCC 440GX Evaluation Board uses an Spansion S29GL256N ROMs (total 64MB)
as a boot device.  You may create a
\tb bootrom 
Install the ROM as follows:

\cs
Start Address    End Address
----------------------------
0xfff00000       0xffffffff
\ce

The available ROM area is 1M.  Default vxWorks_rom and vxWorks_romResident 
(and maybe vxWorks_romCompressed) with a full component load will not fit
in 1M, and such builds will fail with an error: "Image is larger than 1048576 bytes."
Default ROM images do not ship with this BSP.
Reducing components to something more appropriate to a rommed image
will build correctly.

Boot parameters are preserved when the system is powered off in the flash
on the board.

\sh Switch Settings
All switch and jumper settings are fully explained in the AMCC PPC440GX
Evaluation Board User's Manual.

The following switch settings apply:

\sh SW1
\cs
switch       Setting   Description
--------------------------------
1            OFF = 1   Pci clock auto-detect enable
2            OFF = 1   Unused
3            ON  = 0   PCI_CLK_S1_CFG
4            ON  = 0   PCI_CLK_S0_CFG
\ce

\sh SW3
\cs
switch       Setting   Description
--------------------------------
1            OFF = 1   BOOT_CFG0
2            OFF = 1   BOOT_CFG1
3            OFF = 1   BOOT_CFG2
4            OFF = 1   Unused
\ce

The default bootstrap sets up the following parameters:

   - Processor speed of 800MHz
   - Processor Local Bus (PLB) speed of 160MHz
   - On-chip Peripheral Bus (OPB) speed of 80MHz
   - External Peripheral Bus (EBC) speed of 80MHz

FEATURES

\sh Supported Features

The following features are supported in this release:

   - Four DDR SDRAM chips are provided, size of chip is 64M.
   - 440GX 256KB on-chip Level 2 Writethrough Cache (alternately, SRAM)
   - 440GX static TLB setup for operation without MMU library 
   - 440GX TLB and L1 Cache Parity Error Recovery via Critical Machine
     Check Handler
   - System Timer using 440GX Decrementer via external or internal clock
   - 440GX integrated dual 16750-style serial ports using external or
     internal clock
   - 440GX integrated quad Universal Interrupt Controllers (UIC) with
     nested interrupt handling
   - 440GX MAL integrated Memory Access Layer packet DMA device, using
     malLib driver
   - 440GX EMAC4 integrated quad 10/100/1000 Ethernet MAC using emacEnd
     driver 
   - Auxiliary Timer using 440GX FIT hardware timer
   - Watchdog Timer using 440GX WDT hardware timer
   - Timestamp driver using Auxiliary Timer
   - 440GX PCI-X controller and autoconfiguration for PCI conventional
     devices
   - 440GX MMUs via MMU_BASIC, also MMU_FULL 
   - 440GX Caches in disabled, writethrough and copyback modes
   - NVRAM using four sectors of flash
   - TFFS flash filesystem using the 32MB lower flash.
         
\sh Unsupported Features
   - 440GX EMAC TCP Acceleration Hardware (TAH)
   - 440GX DMA
   - 440GX General Purpose Timers (GPTs)
   - IrDA Port

HARDWARE DETAILS
This section documents the details of the device drivers and board
hardware elements.

\sh Devices
The chip drivers used by this bsp are:

    vxbIbmEmacEnd.c - vxBus END style AMCC EMAC Ethernet driver
    vxbIbmMalDma.c - vxBus AMCC Memory Access Layer (MAL) driver
    vxbNs16550Sio.c - vxBus 16550 serial driver
    pciAutoConfigLib.c - PCI bus scan and resource allocation facility
    pciConfigLib.c - PCI Configuration space access support for PCI drivers
    pciIntLib.c - PCI Interrupt support

This BSP also provides the following chip drivers:

    iicLib.c - IIC support for PPC440
    l2Lib.c - L2 SRAM support PPC440GX
    phyLib.c - support for PHY devices on the board
    sysCpcr.c - Generic PPC440GX Chip Control DCR register access routines

\sh Memory Maps

Immediately following a reset, the processor hardware initializes a
temporary entry in the shadow TLB to map a 4KB block of memory at
0xfffff800 to the physical boot device address space at 0x1.fffff000.
The processor commences execution at address 0xfffffffc.  A branch
instruction there jumps to the resetEntry function at address
0xfffff800.

resetEntry initializes a static MMU mapping of the processor's virtual
address space. Either 16 or 18 memory regions are mapped, covering most
of the 4GB addressable program memory space.  This map is in force
until the MMU library is initialized:

\h Bootrom Static MMU Memory Map (with TLB Parity Support)
\ts
Program Addr | Physical Addr | Access Mode | TLB | Use
------------------------------
00000000 | 0.00000000 | -I-G RWX | 01 | System RAM
10000000 | 0.10000000 | -I-G RWX | 09 | System RAM
20000000 | 0.20000000 | -I-G RWX | 0a | System RAM
30000000 | 0.30000000 | -I-G RWX | 0b | System RAM
40000000 | 0.40000000 | -I-G RWX | 0c | System RAM
50000000 | 0.50000000 | -I-G RWX | 0d | System RAM
60000000 | 0.60000000 | -I-G RWX | 0e | System RAM
70000000 | 0.70000000 | -I-G RWX | 0f | System RAM
80000000 | 0.00000000 | -I-G RWX | 10 | System RAM (uncached)
90000000 | 3.00000000 | -I-G RWX | 04 | PCI Mem I/O
a0000000 | 3.10000000 | -I-- RWX | 05 | PCI Memory
b0000000 | 0.f0000000 | -I-G RW- | 06 | I2O Registers
c0000000 | 0.80000000 | -I-G RWX | 07 | Internal SRAM
cfff0000 | 0.00000000 | -I-G R-X | 11 | Exception Vectors
cfff4000 | 0.00004000 | -I-G RWX | 00 | Machine Check Handler
d0000000 | 2.00000000 | -I-G RW- | 08 | PCI
e0000000 | 1.40000000 | -I-G RW- | 02 | Peripherals
f0000000 | 1.f0000000 | -I-- RWX | 03 | Boot Space
------------------------------
\te

If INCLUDE_440X5_TLB_RECOVERY_MAX has been unconfigured, then the following
map will apply:

\h Bootrom Static MMU Memory Map (no TLB Parity Support)
\ts
Program Addr | Physical Addr | Access Mode | TLB | Use
------------------------------
00000000 | 0.00000000 | -I-G RWX | 00 | System RAM
10000000 | 0.10000000 | -I-G RWX | 09 | System RAM
20000000 | 0.20000000 | -I-G RWX | 0a | System RAM
30000000 | 0.30000000 | -I-G RWX | 0b | System RAM
40000000 | 0.40000000 | -I-G RWX | 0c | System RAM
50000000 | 0.50000000 | -I-G RWX | 0d | System RAM
60000000 | 0.60000000 | -I-G RWX | 0e | System RAM
70000000 | 0.70000000 | -I-G RWX | 0f | System RAM
80000000 | 0.00000000 | -I-- RW- | 01 | System RAM (uncached)
90000000 | 3.00000000 | -I-G RWX | 04 | PCI Mem I/O
a0000000 | 3.10000000 | -I-- RWX | 05 | PCI Memory
b0000000 | 0.f0000000 | -I-G RW- | 06 | I2O Registers
c0000000 | 0.80000000 | -I-G RWX | 07 | Internal SRAM
d0000000 | 2.00000000 | -I-G RW- | 08 | PCI
e0000000 | 1.40000000 | -I-G RW- | 02 | Peripherals
f0000000 | 1.f0000000 | -I-- RWX | 03 | Boot Space
------------------------------
\te

The guarded attribute is not specified on one of the PCI Memory address
regions (0xa0000000) to signal to the PCI-X controller that prefetching
is allowed when this region is accessed. Furthermore, the actual extent
of the PCI access windows into Memory and I/O space are controlled by
PIM and POM configuration settings as part of BSP configuration -- see
the supplied config.h for details.

Following this initialization, resetEntry jumps to romInit to continue
the boot procedure.

The vxWorks kernel adds the full vmLib kernel API, which provides
multiple VM contexts.  To enable this support, configure
INCLUDE_MMU_FULL and at least USER_D_MMU_ENABLE.  USER_I_MMU_ENABLE and
INCLUDE_RTP are also required to support the protected memory and user
instruction set ABI execution spaces provided by Real Time Processes
(RTPs). Furthermore, all device access can be controlled via the VM
library.  VxWorks uses a 64-bit physical address type for PowerPC
(in both vmBaseLib and vmLib), so the entire physical address space may
be managed when MMUs are enabled.

MMU library initialization is two-step.
First, the kernel uses the sysStaticTlbDesc[] array to reinitialize the
static TLB entry registers, with cache and access modes as identified by
the array.  Then, it establishes page table entries by consulting the
sysPhysMemDesc[] array. Finally, it enables the I and/or D MMU.

The default static TLB configuration establishes this memory map:

\h vxWorks Static MMU Memory Map (with TLB Parity Support)
\ts
Program Addr | TS | Physical Addr | Access Mode | TLB | Use
------------------------------
00000000 | 0 | 0.00000000 | ---- RWX | 01 | System RAM
10000000 | 0 | 0.10000000 | ---- RWX | 09 | System RAM
20000000 | 0 | 0.20000000 | ---- RWX | 0a | System RAM
30000000 | 0 | 0.30000000 | ---- RWX | 0b | System RAM
40000000 | 0 | 0.40000000 | ---- RWX | 0c | System RAM
50000000 | 0 | 0.50000000 | ---- RWX | 0d | System RAM
60000000 | 0 | 0.60000000 | ---- RWX | 0e | System RAM
70000000 | 0 | 0.70000000 | ---- RWX | 0f | System RAM
80000000 | 0 | 0.00000000 | -I-- RW- | 10 | System RAM (uncached)
90000000 | 0/1* | 3.00000000 | -I-G RW- | 04/14* | PCI Mem I/O
a0000000 | 0/1* | 3.10000000 | -I-- RW- | 05/15* | PCI Memory
b0000000 | 0 | 0.f0000000 | -I-G RW- | 06 | I2O Memory
c0000000 | 0 | 0.80000000 | ---- RWX | 07 | Internal SRAM
cfff0000 | 0 | 0.00000000 | ---- R-X | 00 | Exception Vectors
cfff4000 | 0 | 0.00004000 | -I-- RWX | 11 | Machine Check Handler
d0000000 | 0/1* | 2.00000000 | -I-G RW- | 08/16* | PCI
e0000000 | 0/1* | 1.40000000 | -I-G RW- | 02/12* | Peripherals
f0000000 | 0/1* | 1.f0000000 | W--- RWX | 03/13* | Boot Space
------------------------------
\te

VxWorks does not establish a static mapping for TS=1 (MMU enabled);
instead it controls access via a sysPhysMemDesc entry (see below).

If INCLUDE_440X5_TLB_RECOVERY_MAX has been unconfigured, then the following
map will apply:

\h vxWorks Static MMU Memory Map (no TLB Parity Support)
\ts
Program Addr | TS | Physical Addr | Access Mode | TLB | Use
------------------------------
00000000 | 0 | 0.00000000 | ---- RWX | 00 | System RAM
10000000 | 0 | 0.10000000 | ---- RWX | 09 | System RAM
20000000 | 0 | 0.20000000 | ---- RWX | 0a | System RAM
30000000 | 0 | 0.30000000 | ---- RWX | 0b | System RAM
40000000 | 0 | 0.40000000 | ---- RWX | 0c | System RAM
50000000 | 0 | 0.50000000 | ---- RWX | 0d | System RAM
60000000 | 0 | 0.60000000 | ---- RWX | 0e | System RAM
70000000 | 0 | 0.70000000 | ---- RWX | 0f | System RAM
80000000 | 0 | 0.00000000 | -I-- RW- | 01 | System RAM (uncached)
90000000 | 0/1* | 3.00000000 | -I-G RW- | 04/12* | PCI Mem I/O
a0000000 | 0/1* | 3.10000000 | -I-- RW-   | 05/13* | PCI Memory
b0000000 | 0 | 0.f0000000 | -I-G RW- | 06 | I2O Memory
c0000000 | 0 | 0.80000000 | ---- RWX | 07 | Internal SRAM
d0000000 | 0/1* | 2.00000000 | -I-G RW- | 08/14* | PCI
e0000000 | 0/1* | 1.40000000 | -I-G RW- | 02/10* | Peripherals
f0000000 | 0/1* | 1.f0000000 | W--- RWX | 03/11* | Boot Space
------------------------------
\te

VxWorks does not establish a static mapping for TS=1 (MMU enabled);
instead it controls access via a sysPhysMemDesc entry (see below).

In addition, the sysPhysMemDesc[] array is used to map arbitrary program
addresses to physical address spaces, with a 4KB page size.  The
following table describes the region of memory mapped via the 4KB page
descriptors managed by the virtual memory library (vmLib). In VxWorks
all devices can be mapped.  The memory map for the
vmBaseLib/vmLib-managed area is as follows:

\h vxWorks Dynamic MM Memory Map

\ts
Program Addr   | Physical Addr   | Access Mode   | Size   | Use
---------------+-----------------+---------------|--------|----
00000000 | 0.00000000 | ---- RWX | SDRAM0 Size | System RAM
90000000 | 3.00000000 | -I-G RWX | 02000000 | PCI Mem I/O
a0000000 | 3.10000000 | -I-- RWX | 02000000 | PCI Memory
bfff0000 | 0.ffff0000 | -I-G RWX | 00010000 | I2O Registers
c0000000 | 0.80000000 | ---- RWX | 00040000 | Internal SRAM0
cfff0000 * | 0.00000000 | ---- R-X | 00004000 | Vector Space
d8000000 | 2.d8000000 | -I-G RWX | 00010000 | PCI I/O
dec00000 | 2.dec00000 | -I-G RWX | 00001000 | PCI config cycle
dec80000 | 2.dec80000 | -I-G RWX | 00001000 | PCI bridge config
ded00000 | 2.ded00000 | -I-G RWX | 00001000 | PCI special cycle
e0000000 | 1.40000000 | -I-G RWX | 00001000 | Internal Peripherals
e1000000 | 1.41000000 | -I-G RWX | 00002000 | EPLD
e2000000 | 1.42000000 | -I-G RWX | 00001000 | LCM
e8000000 | 1.48000000 | -I-G RWX | 00001000 | Peripherals
fc000000 | 1.fc000000 | W--- RWX | 00100000 | Small Flash
------------------------------
\te

* = only mapped when the VEC_BASE_ADRS is non-zero, e.g. when
INCLUDE_440X5_TLB_RECOVERY_MAX is configured.

\sh NVRAM
This BSP implements non-volatile RAM via the onboard Flash device.
The non-volatile memory area is described by macros NV_RAM_ADRS and NV_RAM_SIZE
in config.h. It normally contains boot parameters and the MAC address.

\sh TrueFFS
The standard Wind River TrueFFS product is supported in this release.

This BSP uses the Spansion S29GL256N FLASH as the TrueFFS media. 
The FLASH address space that is used as TrueFFS is 0xfc000000 - 0xfe000000.
To use it, define INCLUDE_TFFS in config.h.
When using TrueFFS on a new FLASH for the first time, you should format and 
configure the FLASH by using:

\cs
    sysTffsFormat ();
    usrTffsConfig (0, 0, "/tffs0");
    dosfsDiskFormat ("/tffs0");     /@ For VxWorks 6.6 and later version @/
\ce

Note: If you are running these commands in the VxWorks target shell, please use

\cs
    sp sysTffsFormat
\ce

to format the FLASH as it would take long time to complete.

You should now be able to use VxWorks I/O and file system commands to access
the FLASH device as if it were a disk. If you put a vxWorks image in your FTP
home directory, then it could be tested by using following commands:

\cs
    devs
    copy ("vxWorks", "/tffs0/vxWorks");
\ce

\sh Default Cache Mode

The BSP's default cache mode may be used to globally change the
attributes of the caching areas in the VxWorks Memory Map. The default
cache mode may be changed by using the USER_D_CACHE_MODE and
USER_I_CACHE_MODE configuration parameters. USER_D_CACHE_MODE is used by
sysLib.c to set cache attributes on individual memory regions described
by the sysStaticTlbDesc[] and sysPhysMemDesc[] arrays.

Valid values are CACHE_DISABLED, CACHE_WRITETHROUGH, and CACHE_COPYBACK.
The I-Cache default mode is CACHE_WRITETHROUGH, and the D-Cache default
mode is CACHE_COPYBACK.  If you set USER_D_CACHE_MODE to CACHE_COPYBACK,
the cache attributes for each vxWorks kernel memory region will appear
exactly as in the VxWorks Static and Dynamic Memory Map tables above. If
you set it to CACHE_WRITETHROUGH, regions in the tables above that do
not already have the Inhibit bit set will have the Writethrough bit set.
If you set it to CACHE_DISABLED, all regions will have the Writethrough
bit clear, and the Inhibit bit set.

In practice, even if you configure USER_D_CACHE_MODE to CACHE_COPYBACK,
setting certain other configuration parameters will cause it to be
downgraded to CACHE_WRITETHROUGH. The parameter
INCLUDE_440X5_DCACHE_RECOVERY (which is normally configured, to support
full D-Cache Parity Error recovery) changes your USER_D_CACHE_MODE to
CACHE_WRITETHROUGH.

Due to design limitations in the VxWorks loader and vmBaselib, if the
cache is enabled for D-cache, it must be enabled for I-cache; and if it
is disabled for D-cache, it must be disabled for I-cache. sysLib.c
enforces these requirements.

\sh Serial Configuration

The default configuration of the serial ports are 9600bps, 8 data bits,
no parity, 1 stop bit.

\sh Network Configuration

There are two EMAC Ethernet ports in this BSP.

The Enhanced Network Driver (END) used with the quad integrated EMAC
Ethernet cores is "emac". They are emac0 and emac1.

The EMAC devices share use of a single on-chip Memory Access Layer (MAL)
device and multichannel ZMII or RGMII controller.

Both emac0 and emac1 support 10/100/1000 Mbps, and can be configured to RGMII modes. 
There are total 18 combination of these PHY interfaces to be used. The 
ibmEvb440gx.h includes the details of all possible combinations.
earlier board/CPU models support subsets of the functionality 
depending upon how they have been wired by the vendor.

Since MAL is a Processor Local Bus (PLB) master, its accesses to system
memory are unknown to the processor's L1 cache because there is no
hardware enforced cache coherency in the 440GX.  The emacEnd driver
maintains coherency for both buffer descriptors and buffers.

\sh PCI

There are two PCI slots in this board. If PCI adapter cards are plugged 
into the slots of the board, on this board the PCI Host Bus Bridge is only supported.
This interface is designed to Version 1.0a of the PCI-X Specification 
and supports 32- and 64-bit PCI-X buses. PCI 32/64-bit conventional mode,
compatible with PCI Version 2.3, is also supported.

When testing PCIX interface, you must use the ATX power supply and assemble jumper JT14, 
the power adapter must be installed.

\sh USB
There is no USB controller on this board.
The system-specific PCI USB stub functions (usbPciStub.c) is included and USB PCI interface is supported.
But different USB PCI card may need special phy initialization.

\sh IIC
The Serial EEPROM (sEEPROM) used on this board is the ATMEL semiconductor AT24C02B.
The EEPROM is accessed via a Two-Wire (I2C) serial interface.The IIC address is 0x50.

If want to update the EEPROM value, execute the following commands from the shell:
     iicInit (400000);
   updateBootEeprom();

\sh Supported BootRom builds

The following bootrom file types are known to work in this release:

    - bootrom.bin
    
\sh Creating a bootrom, and bringing up vxWorks

 a) Connect a terminal or terminal emulator to the board (the 9 pin
    connector closest to the printed circuit board).  Emulator parameters
    should be set to 9600bps, 8 data bits, no parity, 1 stop bit.

 b) Build a bin file

    - make bootrom.bin

 c) program it into the S29GL256N flash parts and power up the board,
    OR if you have a Wind River processor probe, see below.

 d) After the boot banner, you may get an error because the default boot
    line in config.h is not 100% correct for your environment.  Type in new
    configuration parameters using the bootrom menu.

\sh Getting the board running VxWorks
  This section will guide you how to run VxWorks on the amcc_taishan board.

1. Creating a bootrom.bin:
    1.1 Launch Workbench 3.0, go to the "File" menu and choose the option
        "New" -> "VxWorks Boot Loader / BSP Project".

    1.2 The "New VxWorks Boot Loader / BSP Project" window will popup, input a
        project name then click "Next" button. In the next window, choose the BSP
        as "amcc_taishan", "Tool chain" could be set as "Diab", in the 
        "Boot loader / BSP image" part, choose the style as "Compressed (default)",
        "Format" as "Bin", then press the "Finish" button to finish the project
        creation.

    1.3 Once the build process finish successfully (You will see "Build Finished"
        in the "Build Console" window without error), you will find the file
        "bootrom.bin" in the BSP directory "$(WIND_BASE)/target/config/amcc_taishan".

  2. Programming bootrom.bin to the amcc_taishan FLASH:
   Support for PPC440GX part is available with Workbench 3.0.

   Using Workbench, complete the following steps to flash your boot ROM image:

    2.1 Install Wind River Probe or Wind River ICE and power it on.

        Connect the JTAG interface cable from the Wind River Probe or Wind 
        River ICE to the amcc_taishan board's JTAG connector (JT9).
        Once the connections have been made, power up the amcc_taishan
        board and launch Workbench on the host.

    2.2 Configure the Wind River Probe or Wind River ICE connection.

        In Workbench on the left pane, there is a "Remote Systems" window. 
        Click on the "Define a connection to remote system" button. In the popup
        "New Connection" window, select the Connection type as 
        "Wind River OCD ICE Connection" for Wind River ICE and "Wind River 
        OCD Probe Connection" for Wind River Probe. If the Wind River ICE 
        is connected via serial port, specify the configuration else select
        "Specify all communication settings manually". 

        In the "Wind River ICE Settings" or "Wind River Probe Settings", 
        select the Board file by clicking on the "Board file" radio button and
        browse to the appropriate board file. For example:
       "$WIND_OCD_PATH/BoardFiles/PowerPC/4xx/Generic/Generic_440GX.brd"
        Select "Auto-attach to connected designators" checkbox. In the 
        "Communications" tab, "Emulator Hostname / IP address" of ICE for Wind 
        River ICE or "USB Device Name" for Wind River Probe. Connect 
        Workbench OCD with the Wind River Probe or Wind River ICE 
        by clicking the "Next" and then "Finish" button. A New connection 
        appears in the "Remote Systems" window.

    2.3 Program Wind River Probe / Wind River ICE with the proper register 
        settings for the amcc_taishan board.

        To view/modify the Wind River ICE firmware setting, terminate the
        debug session for Wind River ICE. In the "Remote Systems" window,
        right click on the newly connected OCD connection. Select 
        "OCD Utilities". To know about the current firmware information, 
        select "Emulator firmware version information". To download the new
        firmware, Select "Firmware Download" and select appropriate file 
        from "$WIND_OCD_PATH/CommonHardwareFiles/*.bin".

        Go to the "OCD Command Shell" and click on the "Settings" button.
        The OCD Command Shell Settings dialog appears, where you can 
        select the appropriate register file. Navigate to the location of
        the appropriate register configuration file for the amcc_taishan
        board.
        After choosing the register file, press the "OK" button. In the OCD Command
        Shell, click the "Playback File" button. The selected register file is
        downloaded to the target and the commands from the file appear in the
        OCD command shell. When playback is finished the ">BKM>" or the ">ERR>"
        prompt returns.

    2.4 Get into Background Mode.

        Execute the "IN" command to reset the board and initialize it with
        the register setting.
\cs
            IN
\ce

    2.5 Program the amcc_taishan Flash.

        In WindRiver OCD, Select the "Flash Programmer". The 
        "Flash Programmer" view has three tabs: "Configuration", 
        "Programming" and "Memory/Diagnostics".

        2.5.1 Select the "Configuration" tab. In the "Device Selection' 
            field, select the "AMD -> S29GL256N -> 16384 x 16 -> 2 Device"

            In "Flash Bank Address" group for the "Base" enter "FC000000" . 
            In the "RAM Workspace" group for the "Workspace Start at"
            enter "0x00000000" and for the "Workspace Size" enter 
           "0x8000".

        2.5.2 Click on the "Programming" tab. Select the "Add File" 
            button, in the popup window, select the newly generated
            "$(WIND_BASE)/target/config/amcc_taishan/bootrom.bin", and click
            the "This is a raw binary file" checkbox then click "OK" to finish
            file adding. Click the "Start Address" and set it as "0xfc000000",
            the "End Address" will be fixed automatically. Please notice that
            the "Start Address" should include the "Offset bias".
            Enable a file by clicking on the checkbox under the "Enabled" heading.

        2.5.3 In the "Erase Sector Selection" pane, select addresses
            fff00000 through ff8fffff.  Press the "Erase/Program" 
            button to erase the flash and then program the flash with selected
            "bootrom.bin" file. A window pops up to show the progress of the
            Flash device programming. When it is complete, the Flash should
            contain the new boot program.           


\sh Power Supply

There are two kinds of power supply. One is standard ATX power supply,
another is 120/240V IN 5V/4A OUT power adapter. The PCIX interface is
powered by ATX and other parts are powered by the adapter. When testing 
PCIX interface, you must use the ATX power supply and assemble jumper JT14, 
the power adapter must be installed.

\sh amcc_taishan Board diagram   
.bS                                   
+------------------------------------------------------------------------+             
|                    +------------------------------------+              |                     
|                    |       PCI2                ||       | J16          |                     
|                    +------------------------------------+              |                     
|                                                                        |                     
|                    +------------------------------------+              |                     
|                    |       PCI1                ||       | J15          |                     
|                    +------------------------------------+              |                     
+---------+                                                     +---+    |                     
|   J12   |                                                     |ATX|    |                     
|   ETH   |                       ___________                   |   |    |                     
+---------+                       |           |                 |PWR|    |                     
|                                 |           |                 +---+    |                     
+---------+                       |           |                          |                     
|   J11    |                      |amcc_440gx |                          |                     
|   ETH   |                       |           |                          |                     
+---------+                       |           |                          |                     
|                                 |__________/A1                         |                     
|                                    U21                            +----+                     
|                                                                   ---  |-+                   
|                                                           UART1   ---  | |                   
|                                                                   ---  | |                   
|                                                            J17    ---  | |                   
|                                                                   ---  |-+                   
|                                                                   +----+                     
|                                                                        |                     
|                                                                   +----+                     
|                                                                   ---  |-+                   
|                                                           UART0   ---  | |                   
|                                                                   ---  | |                   
|                                       .x.                  J16    ---  | |                   
| pwr                                   sw2                         ---  |-+                   
|   +-------------------------------+                               +----+                     
|   | ---------- lcd        ------- |   .x.                              |                     
|   +-------------------------------+   sw1                              |                     
|                                                                        |                     
+---------------------------------------------------+----------+--------+                      
.bE  
SPECIAL CONSIDERATIONS

\sh Known Problems

The Auxiliary Clock driver (in vxbPpc440Timer.c) is implemented using
interrupts provided by FIT interrupt divider taps. This means there are
four rates available, in multiples of 16 apart. The lowest rate can be a
number less than 10 and, due to integer rounding error, may refer to an
actual rate corresponding to nearly a full integer larger.  The
Validation Test Suite expects the Auxiliary Clock to be able to
reproduce arbitrary rates with an accuracy of 10%.  It will log these
results as errors.

WIND00061750. cacheLib bspvts test fails on amcc_taishan.

SEE ALSO
\tb VxWorks Programmer's Guide: VxWorks for PowerPC Architecture Supplement

BIBLIOGRAPHY
Please refer to the following documents for further information on the TAISHAN
AMCC PPC440GX EVB board.

\tb PPC440GX UM2019_EV_kit_v1_02.pdf

