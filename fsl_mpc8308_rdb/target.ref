\" fsl_mpc8308_rdb/target.ref - Freescale MPC8308_RDB target specific documentation
\"
\" Copyright (c) 2010, 2011 Wind River Systems, Inc.
\"
\" The right to copy, distribute, modify or otherwise make use
\" of this software may be licensed only pursuant to the terms
\" of an applicable Wind River license agreement.
\"
\" modification history
\" --------------------
\" 01d,20may11,sye  rename DRV_STORAGE_FSL_SDHC to DRV_STORAGE_SDHC, update
\"                  descriptions for USB and TFFS. (WIND00240151)
\" 01c,26jan11,kxb  remove obsolete TFFS component
\" 01b,18nov10,pgh  Name change for USB file system boot device.
\" 01a,08jul10,syt  created
\"
\TITLE fsl_mpc8308_rdb - Freescale MPC8308_RDB

INTRODUCTION
This reference entry provides board-specific information necessary to run
VxWorks for the fsl_mpc8308_rdb BSP.

The BSP will work with the REV2 of the MPC8308_RDB board by default.

\sh Jumpers & Switches

There is no jumper need to be configured.

Default Switch Settings

\ts
Switch Number                                         | Switch ON | Switch OFF
------------------------------------------------------------------------------
S1 (Board revision and boot Flash selection switch)   |           | 1,2,3,4
S2 (Reset configuration word source selection switch) | 1,2,3,4   |
\te

\sh Getting the board running VxWorks
This section will guide you how to run VxWorks on the Freescale MPC8308_RDB
board.

1. Creating a bootrom.bin:

    1.1 Launch VxWorks Development Shell, go to the BSP directory
        "$(WIND_BASE)/target/config/fsl_mpc8308_rdb".

    1.2 Type "make bootrom.bin" and press ENTER.

    1.3 Once the make process finish successfully, you will find
        the file "bootrom.bin" in the BSP directory
        "$(WIND_BASE)/target/config/fsl_mpc8308_rdb".

2.Flashing the VxWorks bootrom image with workbench

    2.1 Install Wind River Probe or Wind River ICE and power it on.

        Connect the JTAG interface cable from the Wind River Probe or Wind
        River ICE to the MPC8308_RDB board's JTAG connector (P2). Once the
        connections have been made, power up the MPC8308_RDB board and
        launch Workbench on the host.

    2.2 Configure the Wind River Probe or Wind River ICE connection.

        In Workbench on the left pane, there is a "Remote Systems" window.
        Click on the "Define a connection to remote system" button. In the
        popup "New Connection" window, select the Connection type as
        "Wind River OCD ICE Connection" for Wind River ICE and "Wind River
        OCD Probe Connection" for Wind River Probe. If the Wind River ICE
        is connected via serial port, specify the configuration else select
        "Specify all communication settings manually".

        In the "Wind River ICE Settings" or "Wind River Probe Settings",
        click on the "Processor" radio button and select the appropriate
        processor type - MPC8308. Connect Workbench OCD with the
        Wind River Probe or Wind River ICE by clicking the "Next" and then
        "Finish" button. A New connection appears in the "Remote Systems"
        window.

    2.3 Program Wind River Probe / Wind River ICE with the proper register
        settings for the MPC8308_RDB board.

        Go to the "OCD Command Shell" and click on the "Settings" button.
        The OCD Command Shell Settings dialog appears, where you can select
        the register file - "Freescale_MPC8308_RDB.reg" which locates in
        "$WIND_OCD_PATH\RegisterFiles\PowerPC\83xx\Freescale". After
        choosing the register file, press the "OK" button. In the OCD
        Command Shell, click the "Playback File" button. The selected
        register file is downloaded to the target and the commands from the
        file appear in the OCD command shell. When playback is finished the
        ">BKM>" or the ">ERR>" prompt returns.

    2.4 Get into Background Mode.

        Execute the "IN" command to reset the board and initialize it with
        the register setting.

\cs
        IN
\ce

    2.5 Program the Flash.

        In WindRiver OCD, Select the "Flash Programmer". The
        "Flash Programmer" view has three tabs: "Configuration",
        "Programming" and "Memory/Diagnostics".

        2.5.1 Select the "Configuration" tab. In the "Device Selection'
            field, select the "SPANSION -> S29GL064N3 -> 4096 x 16 -> 1 Device".

            Note: The real FLASH type is MXIC 29GL640ETTI. But it is compatible
            With S29GL064N3.

            In "Flash Bank Address" group for the "Base" enter "0xfe000000".
            In the "RAM Workspace" group for the "Workspace Start at" enter
            "0x00000000" and for the "Workspace Size" enter "0x4000".

        2.5.2 Click on the "Programming" tab. Select the "Add File"
            button, in the popup window, select the newly generated
            "$(WIND_BASE)/target/config/fsl_mpc8308_rdb/bootrom.bin", and click
            the "This is a raw binary file" checkbox then click "OK" to
            finish file adding. Click the "Start Address" and set it as
            "0xfe000000", the "End Address" will be fixed automatically.
            Please notice that the "Start Address" should include the
            "Offset bias". Enable a file by clicking on the checkbox under
             the "Enabled" heading.

        2.5.3 Press the "Erase/Program" button to erase the flash and then
            program the flash with "bootrom.bin" file. A window pops up to
            show the progress of the Flash device programming. When it is
            complete, the Flash should contain the new boot program.

            Note:If the operation fails, you should run the following
            command in OCD command shell:

\cs
            cf rcw 0x44060000 0xa0606c00
            IN
\ce

    Now you will get VxWorks bootrom running.

    Note: If you are programming VxWorks bootrom for the first time,
    it's strongly recommended that you should use the 'M' command
    provided by VxWorks bootrom to check and configure the ethernet MAC
    address, see the section "Ethernet Address" below for more details.

FEATURES

This section describes all features of the board, supported or not.
It documents all configurations of the board and the interaction between
features and configuration items.

\sh List of Hardware Features (Freescale MPC8308_RDB REV 2 board)

\ts
Hardware Interface  | Controller | Driver/Component           | Status
----------------------------------------------------------------------------
UART:0              | on-chip    | DRV_SIO_NS16550            | SUPPORTED
UART:1              | on-chip    | DRV_SIO_NS16550            | SUPPORTED
NOR-FLASH           | MX29LV640E | f2xFlashMtd.c/TFFS         | SUPPORTED
NAND-FLASH          | K9F5608U0D | sysNandFlash.c             | SUPPORTED
1GB-ETHERNET:1      | on-chip    | INCLUDE_ETSEC_VXB_END      | SUPPORTED
1GB-ETHERNET:2      | on-chip    | INCLUDE_ETSEC_VXB_END      | SUPPORTED
GBE L2 Switch       | VSC7385    | 'VSC7385 Firmware'         | SUPPORTED
TIMER               | on-chip    | DRV_TIMER_DEC_PPC          | SUPPORTED
TIMER               | on-chip    | DRV_TIMER_QUICC_PPC        | SUPPORTED
DMA                 | on-chip    | DRV_DMA_M512X              | SUPPORTED
miniPCI-E-HOST      | on-chip    | DRV_PCIBUS_M83XX_EX        | UNTESTED
USB-HOST            | on-chip    | INCLUDE_EHCI               | SUPPORTED
USB-TARGET          | on-chip    | INCLUDE_FSL_TCD            | SUPPORTED
eSDHC               | on-chip    | DRV_STORAGE_SDHC           | SUPPORTED
I2C                 | on-chip    | sysMotI2c.c                | SUPPORTED
I2C RTC             | DS1339     | ds1339Rtc.c                | SUPPORTED
I2C DAC             | AD5301     | 'N/A'                      | UNSUPPORTED
I2C EEPROM          | M24256     | 'N/A'                      | UNSUPPORTED
I2C Thermal Sensor  | LM75       | 'N/A'                      | UNSUPPORTED
I2C expander        | PCF8574    | 'N/A'                      | UNSUPPORTED
I2C MCU             | MC9S08QG8  | 'N/A'                      | UNSUPPORTED
GPIO                | on-chip    | 'N/A'                      | UNSUPPORTED
\te

\sh Feature Interactions
Refer to the board vendor's documentation.

HARDWARE DETAILS

This section documents the details of the device drivers and board
hardware elements.

\sh Verified Hardware

This BSP has been verified on Rev 2 of Freescale MPC8308_RDB board. Other
revisions of the board are untested and unwarranted. The default clock speed
for MPC8308_RDB is 400MHz for core, 133MHz for CCB.

\sh Memory Maps

The following table describes the fsl_mpc8308_rdb memory map:

\ts
   Start    | Size  |    End      | Access to
---------------------------------------------
0x0000_0000 | 128MB | 0x07FF_FFFF | DDR SDRAM
0xA000_0000 |  64MB | 0xA3FF_FFFF | mini PCI Express Mem
0xA400_0000 |  64MB | 0xA7FF_FFFF | mini PCI Express MemIO
0xB000_0000 | 256MB | 0xBFFF_FFFF | mini PCI Express IO
0xE000_0000 |   1MB | 0xE00F_FFFF | IMMR
0xE060_0000 |  32KB | 0xE060_7FFF | NAND Flash
0xFE00_0000 |   8MB | 0xFE7F_FFFF | NOR Flash
\te

\sh Serial Connections
Most VxWorks BSPs do not use hardware handshaking in the serial interface,
and thus a simple 3 wire connection is commonly used.

The MPC8308_RDB board has two RS-232 standard UART ports.
\sh Serial Configuration
No special configuration needed.
Default configuration is:
    Baud Rate: 9600
    Data: 8 bit
    Parity: None
    Stop: 1 bit
    Flow Control: None

\sh GBE L2 Switch (VSC7385)
This BSP supports the Vitesse VSC7385 ethernet switch which is connected to
eTSEC2. The switch chip must be loaded with a firmware image which is supplied
in binary form in the file vsc2bin. This file is converted into an ELF object
using objcopyppc and is then compiled into the VxWorks image (or bootrom).

Note that link events triggered by unplugging or replugging cables on the
external Vitesse switch ports have no bearing on the link state of the
eTSEC2 port itself: eTSEC2 always has a valid link, even if all external
switch ports are disconnected.

\sh Ethernet Address
The MPC8308_RDB boards do not have unique Ethernet hardware addresses assigned
to each eTSEC port. A unique address is absolutely necessary if the user wishes
to connect the board to a network. Thus, the user must provide suitable
6 byte Ethernet addresses for each eTSEC port used on a network. An address is now
stored in flash with the bootline. Use the 'M' command to modify for a distinct
MAC address.

\sh Network Configuration
Each ETSEC port allows 10/100/1000 connection. The driver will auto-negotiate
and configure the port accordingly.

The following END and corresponding END2 drivers are supported in this BSP.
However, only the END driver is enabled by default.

\ts
Driver | END                     | END2
---------------------------------------
ETSEC  | INCLUDE_ETSEC_VXB_END   | INCLUDE_ETSEC_VXB_END2
\te

To enable the END2 driver, you should modify as follows:

In config.h, INCLUDE_END should be commented out when defining INCLUDE_END2
for a command line build. Also replace the END driver name with corresponding
END2 driver name, then rebuild the bootrom and vxWorks image.

For project build under Workbench, in the Kernel Configuration Window of your
created VxWorks Image Project, include INCLUDE_END2 and corresponding END2
driver, exclude INCLUDE_END and END driver, then rebuild your project.

\sh Boot Devices
The supported boot devices are:

\ts
    `motetsec0' | ETSEC1
    `motetsec1' | ETSEC2
    `fs'        | USB
    `fs'        | SD    
    `fs'        | TFFS
\te

\sh Boot Methods
The boot methods are affected by the boot parameters. If no password is
specified, RSH (remote shell) protocol is used. If a password is specified,
FTP protocol is used, or, if the flag is set to 0x80, TFTP protocol is used.

\sh Special Routines
None

\sh DMA
Freescale DMAC Controller is supported in this release.
To enable DMA controller support, please define the following macro in config.h:
\cs
    #define DRV_DMA_M512X
\ce
Hardware SNOOP is not supported by MPC8308's DMAC, so when the DMA channel
is used, CACHE_SNOOP_ENABLE shouldn't be defined as USER_D_CACHE_MODE in config.h.
\ts
    #ifdef  DRV_DMA_M512X
    #    define USER_D_CACHE_MODE    CACHE_COPYBACK
    #else
    #    define USER_D_CACHE_MODE    (CACHE_COPYBACK | CACHE_SNOOP_ENABLE)
    #endif
\te

\sh I2C and RTC device
The DS1339 RTC (real time clock) device, connected to the MPC8308's I2C interface,
is supported in this release. To enable this function, please define the following
macro in config.h:
\cs
    #define INCLUDE_RTC
\ce

The initialization function
\cs
STATUS ds1339RtcInit(void)
\ce
creates a RTC_DATE_TIME structure, which is returned by a global pointer 'pstRTC'.
\cs
typedef struct rtcdt
    {
    unsigned long year;             /@ year @/
    unsigned long month;            /@ month @/
    unsigned long day_of_month;     /@ day of month @/
    unsigned long day_of_week;      /@ day of week @/
    unsigned long hour;             /@ hour @/
    unsigned long minute;           /@ minute @/
    unsigned long second;           /@ second @/
    } RTC_DATE_TIME;
\ce
After the structure is initialized, the configuration values can be written to the DS1339
with the set function:
\cs
STATUS ds1339RtcSet
    (
    RTC_DATE_TIME * rtc_time
    )
\ce
The DS1339's current values can be read using:
\cs
STATUS ds1339RtcGet
    (
    RTC_DATE_TIME * rtc_time
    )
\ce

\sh USB
MPC8308 has one high-speed USB controller. This BSP supports either USB host
mode or USB target mode through mini-AB on front panel. The two modes can't be
enabled at the same time.

\sh 1. Host mode
USB Enhanced Host Controller (EHCD) driver has been integrated into this BSP,
to enable it, you should modify as follows:

For project build under Workbench, in the Kernel Configuration Window of your
created VxWorks Image Project, add INCLUDE_EHCI_INIT component, which will
automatically include EHCI host controller driver, then add USB class drivers
which you want, then rebuild your project. For example:

To support USB mass storage device, you need to include the following components:

\cs
INCLUDE_FS_MONITOR
INCLUDE_ERF
INCLUDE_XBD
INCLUDE_XBD_BLK_DEV
INCLUDE_DEVICE_MANAGER
INCLUDE_XBD_PART_LIB
\ce

And the following components for GEN1 mass storage driver:

\cs
INCLUDE_USB_MS_BULKONLY
INCLUDE_USB_MS_BULKONLY_INIT
\ce

or the following components for GEN2 mass storage driver:

\cs
INCLUDE_USB_GEN2_STORAGE_INIT
INCLUDE_USB_GEN2_STORAGE
INCLUDE_USB_GEN2_HELPER
\ce

Note: if you want to use GEN2 usb boot, the below components are necessary:

\cs
INCLUDE_BOOT_USB_FS_LOADER
INCLUDE_BOOT_FILESYSTEMS
INCLUDE_IO_SYSTEM
\ce

Then add the following components if you want to use the DOSFS file system with
U-Disk:

\cs
INCLUDE_DOSFS
INCLUDE_DOSFS_MAIN
INCLUDE_DOSFS_CHKDSK
INCLUDE_DOSFS_FMT
INCLUDE_DOSFS_FAT
INCLUDE_DOSFS_DIR_VFAT
\ce

or the following components for the HRFS file system:

\cs
INCLUDE_HRFS
INCLUDE_HRFS_CHKDSK
INCLUDE_HRFS_HISPEED_WRITE_MODE
INCLUDE_HRFS_FORMAT
\ce

Note:
1. Only mass storage device has been verified on the target.
2. For command line build, you must include the components manually in
config.h.

For more information, please refer to
\tb Wind River USB for VxWorks 6 PROGRAMMER'S GUIDE

\sh 2. Target mode
To enable the board to operate as a USB mass storage target, perform the
following steps:

2.1 Define INCLUDE_FSL_TCD in the BSP's config.h file. This will cause other
related macros to be defined automatically.

2.2 Adjust the USB TCD and mass storage parameter definitions as needed:

\cs

    /@ Defines for USB Device support @/

    #define INCLUDE_FSL_TCD

    #ifdef INCLUDE_FSL_TCD
    #   ifndef _ASMLANGUAGE
    IMPORT void fslUsbDrDeviceHwInit (void);
    #   endif
    #   define FSL_USB_DR_DEVICE_IO_BASE      USB_DR_BASE
    #   define FSL_USB_DR_DEVICE_INT_NUM      INUM_USB_DR
    #   define FSL_USB_DR_DEVICE_HW_INIT      fslUsbDrDeviceHwInit
    #   define FSL_USB_DR_DEVICE_BE_REG       FALSE
    #   define FSL_USB_DR_DEVICE_BE_DESC      FALSE
    #   define FSL_USB_DR_DEVICE_BE_SETUP     TRUE
    #   define FSL_USB_DR_DEVICE_SYS_CONF     TRUE
    #   define FSL_USB_DR_DEVICE_BUFFER_ES    FALSE
    #   define FSL_USB_DR_DEVICE_PHY_MODE     FSL_USB_DR_PHY_ULPI
    #   define INCLUDE_USB_TARG
    #   define INCLUDE_MS_EMULATOR
    #   define INCLUDE_MS_EMULATOR_INIT
    #endif  /@ INCLUDE_FSL_TCD @/

    #ifdef INCLUDE_MS_EMULATOR
    #   define INCLUDE_DOSFS
    #   define INCLUDE_XBD_RAMDRV
    #endif /@ INCLUDE_MS_EMULATOR @/
\ce

\sh TrueFFS
This BSP uses the MX29LV640 flash as the TrueFFS media.
To use it, define INCLUDE_TFFS in config.h.

The standard Wind River TrueFFS product is supported in this release.

This BSP uses 6 MBytes of the MX 29LV640 flash as the TrueFFS media.
The overall FLASH address space is 0xfe000000 ~ 0xfe7fffff,
subdivided as:

\ts
Start       | Size     | End         | Comment
------------------------------------------------
0xFE00_0000 | 2MB      | 0xFE1F_FFFF | bootrom and NVRam
0xFE20_0000 | 6M       | 0xFE7F_FFFF | TureFFS
\te

To use TrueFFS, define INCLUDE_TFFS in config.h. When using TrueFFS on a new FLASH
for the first time, you should format and configure the FLASH by using:

\cs
    sysTffsFormat ();
    usrTffsConfig (0, 0, "/tffs0");
\ce

If you are using DOSFS, please use

\cs
    dosfsDiskFormat ("/tffs0");
\ce

Note: If you are running these commands in the VxWorks kernel shell, you may
prefer to run the format operations as separate tasks, e.g.
\cs
    sp sysTffsFormat
\ce
since they can take a long time to complete.

You should now be able to use VxWorks I/O and file system commands to access
the FLASH device as if it were a disk.  For example, you can copy a vxWorks
image from your host to TFFS by using file system 'copy'.  Of course, you should
define INCLUDE_DISK_UTIL in config.h first.

\cs
    copy ("vxWorks", "/tffs0/vxWorks");
\ce

If you want to use "/tffs0" as a boot device, you should follow the instructions:

For command line mode, make sure INCLUDE_TFFS is defined in config.h, re-build
a bootrom from the BSP directory under VxWorks Development Shell, and program
it into the flash chip. Also make sure you have all the necessary file system
components defined in config.h.

For project mode with PROFILE_BOOTAPP profile under Workbench, you should make
sure to include the following components in the Kernel Configuration Window:

\cs
    INCLUDE_ERF
    INCLUDE_DEVICE_MANAGER
    INCLUDE_FS_EVENT_UTIL
    INCLUDE_FS_MONITOR
    INCLUDE_XBD
    INCLUDE_XBD_BLK_DEV
    INCLUDE_XBD_TRANS
    INCLUDE_DOSFS
    INCLUDE_DOSFS_DIR_FIXED
    INCLUDE_DOSFS_DIR_VFAT
    INCLUDE_DOSFS_FAT
    INCLUDE_DOSFS_FMT
    INCLUDE_DOSFS_MAIN
    INCLUDE_TFFS_MOUNT
    INCLUDE_TL_FTL
    INCLUDE_BOOT_FILESYSTEMS
\ce

Then right click the project, select "Build Options\Set Active Build Spec...",
check the "default_romCompress" box, you will see "vxWorks.bin(default_romCompress)"
item is listed in the project, right click it and select "Build Target", this
will generate a default_romCompress.bin in the project directory, program
it into the flash chip as a bootrom.

Below is an example of using /tffs as a boot device:

\cs
    boot device          : fs
    unit number          : 0
    processor number     : 0
    host name            : host
    file name            : /tffs0/vxWorks
    inet on ethernet (e) : 192.168.0.3:ffffff00
    host inet (h)        : 192.168.0.2
    gateway inet (g)     : 192.168.0.1
    user (u)             : user
    ftp password (pw)    : pass
    flags (f)            : 0x0
    target name (tn)     : fsl_mpc8308_rdb
    other (o)            : motetsec0
\ce

\sh SD memory card controller (eSDHC)
The MPC8308's on chip enhanced SD host controller (eSDHC), connected to socket
P5 on the board, supports standard SD memory cards compatible with SD memory 
card specification 2.0. But the SDHC driver does not support MMC cards and 
high speed SD memory cards.

To enable eSDHC support, make sure the following feature definitions are
added in config.h:

\cs
    #define DRV_STORAGE_SDHC
\ce

Use of the internal DMA engine, and selection of interrupt vs. polled mode,
are configured by setting the values of 'dmaMode' and 'polling' in hwconf.c.
For example, to select interrupt mode and enable use of the internal DMA engine:
\cs
    /@ hwconf.c @/
    ...
    struct hcfResource sdhcResources[] = {
    ...
        { "dmaMode",             HCF_RES_INT,    { (void *)0 } },
        { "polling",             HCF_RES_INT,    { (void *)0 } },
    ...
    };
    ...
\ce

When using an SD card for the first time, you should format it as a FAT file
system by using
\cs
    dosFsVolFormat ("/sd0:1", 0x20, 0);    /@ FAT32 format @/
\ce
or
\cs
    dosFsVolFormat ("/sd0:1", 0x10, 0);    /@ FAT16 format @/
\ce

Now, you can use VxWorks I/O and file system commands to access the SD card
device as if it were a disk. For example, you can copy a vxWorks image from
your host to the SD card by using file system copy. Of course, you should
define INCLUDE_DISK_UTIL in config.h first.

\cs
    copy ("vxWorks", "/sd0:1/vxWorks");
\ce

If you want to use SD card as a boot device, you should follow these steps:

For command line mode, make sure DRV_STORAGE_SDHC, INCLUDE_BOOT_FILESYSTEMS
is defined in config.h, re-build a bootrom from the BSP directory under VxWorks
Development Shell, and program it into the flash chip. Also make sure you have
all the necessary file system components defined in config.h.

For project mode with PROFILE_BOOTAPP profile under Workbench, you should make
sure to include the following components in the Kernel Configuration Window:

\cs
    DRV_STORAGE_SDHC
    INCLUDE_ERF
    INCLUDE_DEVICE_MANAGER
    INCLUDE_FS_EVENT_UTIL
    INCLUDE_FS_MONITOR
    INCLUDE_XBD
    INCLUDE_XBD_BLK_DEV
    INCLUDE_XBD_TRANS
    INCLUDE_DOSFS
    INCLUDE_DOSFS_DIR_FIXED
    INCLUDE_DOSFS_DIR_VFAT
    INCLUDE_DOSFS_FAT
    INCLUDE_DOSFS_FMT
    INCLUDE_DOSFS_MAIN
    INCLUDE_BOOT_FILESYSTEMS
    INCLUDE_DISK_UTIL   
\ce

Then right click the project, select "Build Options\Set Active Build Spec...",
check the "default_romCompress" box, you will see "vxWorks.bin(default_romCompress)"
item is listed in the project, right click it and select "Build Target", this
will generate a default_romCompress.bin in the project directory, program
it into the flash chip as a bootrom.

Below is an example by using SD card "/sd0:1" as a boot device:

\cs
    boot device          : fs
    unit number          : 0
    processor number     : 0
    host name            : host
    file name            : /sd0:1/vxWorks
    inet on ethernet (e) : 192.168.0.3:ffffff00
    host inet (h)        : 192.168.0.2
    gateway inet (g)     : 192.168.0.1
    user (u)             : target
    ftp password (pw)    : vxTarget
    flags (f)            : 0x0
    target name (tn)     : fsl_mpc8308_rdb
    other (o)            : motetsec0
\ce

Note: INCLUDE_BOOT_FILESYSTEMS macro is only used for bootrom/bootapp stage, and conflict
with vxWorks image, so undef it after you've finished startup.

\sh PCIe Access
There is one x1 mini PCIe slot (P3) on the Freescale MPC8308_RDB board.
In order to support PCIe devices in this BSP, please define the following
macro in config.h:

\cs
    #define DRV_PCIBUS_M83XX_EX
\ce

Note: As no supported mini-PCIe devices can be found to test/validate the
functionality of the PCI-EX controller, the mini-PCIEX controller is marked
as 'UNTESTED' in 'List of Hardware Features' table. So there's no warranty 
that the mini-PCIEX slot in this board is available and stable.

\sh Make Targets
The make targets are listed as the names of object-format files.
Other images not listed here have not been validated.

\ts
`bootrom'
`bootrom.bin'
`bootrom_uncmp'
`bootrom_uncmp.bin'
`vxWorks' (with `vxWorks.sym')
`vxWorks.st'
\te

\sh BSP Bootloaders and Bootroms

\ts
Bootloader/Bootrom   | status
----------------------------------
bootrom              | SUPPORTED
bootrom_uncmp        | SUPPORTED
bootrom_res          | UNSUPPORTED
vxWorks_rom          | SUPPORTED
vxWorks_romCompress  | SUPPORTED
vxWorks_romResident  | SUPPORTED
\te

\sh BSP Validated Tools

\ts
Tool                         | Connection/Type | Status
-------------------------------------------------------
Workbench Debugger           | ETHERNET/WDB    | SUPPORTED
Workbench System Viewer      | ETHERNET/WDB    | SUPPORTED
Workbench MemScope           | ETHERNET/WDB    | SUPPORTED
Workbench ProfileScope       | ETHERNET/WDB    | SUPPORTED
Workbench StethoScope        | ETHERNET/WDB    | SUPPORTED
Workbench CoverageScope      | ETHERNET/WDB    | SUPPORTED
Workbench Core File Analysis | ETHERNET/WDB    | SUPPORTED
Workbench Sensor Points      | ETHERNET/WDB    | SUPPORTED
Workbench OCD Debugger       | JTAG            | SUPPORTED
Workbench OCD Flash          | JTAG            | SUPPORTED
\te

\sh Power-on Reset Initialization

The state of the chip post reset is controlled via the HRCW.

The hardware reset configuration word(HRCW) is set via programming a bootrom.

The definitions are in mpc8308rdb.h. To change this setting you must modify
mpc8308rdb.h, rebuild and replace the bootrom.

eTSECs default is RGMII. 16bit flash is assumed. For more details see the board
manual and also MPC8308 Reference manual.

\sh SYSCLK Frequency
33.333 MHz OSC is used.

BOARD LAYOUT

The diagram below shows jumpers and connectors relevant to VxWorks
configuration for MPC8308_RDB board.

\bs
+-------------------------------------------------------------------------+
|                                                                         |
|                                                               +---------+
|                                                              /|         | ENET1 (top)
|                                                         P9  /||         | ENET6 (bottom)
|    +----------+                                             ||+---------+
|    |Nor Flash |    +-------+                                |/|         | ENET4 (top)
|    |MX29GL640 |    |       |                            P11 |||         | ENET5 (bottom)
|    +----------+    |VSC7385|                                ||+---------+
|    |NAND Flash|    |       |                                |/|         | ENET2 (top)
|    |K9F5608U  |    +-------+                                /||         | ENET3 (bottom)
|    +----------+                                         P10 ||+---------+
|                                                             |/----------|
|                                                             +----------/|
|                                                                    +----+
|                                                         P4         | P8 | mini USB
|                                                     (IEEE 1588)    +----+
|                            +------------+              +--+             |-|
|      ______________        |            |              |  |             |-|Power On
|     |______________|       |            |              |  |           +-|
|     |              |       |  MPC8308   |              |  |           |O| Reset
|     |      P3      |       |            |              |  |           +-|
|     |              |       |            |           P2 +--+             |
|     |              |       +------------+         (JTAG)    +-----------+
|     |  mini PCIEx  |                               +--+     |     - - + |
|     |     Slot     |                               |  |     |    /     ||
|     |              |       +-------+ +-------+     |  |  P5 |   |======|| SD socket
|     |              |       |       | |       |     |  |     |    \     ||
|     |              |       |DDR Ram| |DDR Ram|     |  |     |     --- + |
|     |______________|       |       | |       |     +--+     +-----------+
|                            +-------+ +-------+                      +-----+
|                                                                    /|     |
|                                                                   /||  P1 | UART1 (top)
+-----+                                                             |||     | UART1 (bottom)
|     |                                                             |||     |
|     |P12(Power Connector)                 +-+-+-+-+   +-+-+-+-+   ||+-----+
+-----+                                     |-|-|-|-|   |-|-|-|-|   |/-----/
|                                         S1+-+-+-+-+ S2+-+-+-+-+   +-----/
+-------------------------------------------------------------------------+
\be

BIBLIOGRAPHY

\tb MPC8308 PowerQUICC II Pro Processor Reference Manual

\tb PowerQUICC MPC8308_RDB User Guide

\tb E300 Core Reference Manual

\tb PowerPC Microprocessor Family: The Programming Environments for 32-bit Microprocessors MPCFPE32B/AD

WEB RESOURCES

Much of the Freescale documentation can be found on line. The following
URL was correct at the time of writing for semiconductor area. You'll have to
search the documentation using processor name for specific documentation.

http://www.freescale.com/

SEE ALSO

\tb Workbench User's Guide: Getting Started

\tb VxWorks Programmer's Guide: Configuration

\tb VxWorks Programmer's Guide: Architecture Supplement
