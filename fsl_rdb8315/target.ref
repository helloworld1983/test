\" fsl_rdb8315/target.ref - Freescale MPC8315ERDB target specific documentation
\"
\" Copyright (c) 2008-2009, 2011, 2012 Wind River Systems, Inc.
\"
\" The right to copy, distribute, modify or otherwise make use
\" of this software may be licensed only pursuant to the terms
\" of an applicable Wind River license agreement.
\"
\" modification history
\" --------------------
\" 01d,28feb12,c_l Update the description of Security Engine.(WIND00331832)
\" 01c,26jan11,kxb Remove obsolete TFFS component
\" 01b,14dec09,x_z Code clean.
\" 01a,18jun08,z_l Created.
\"
\TITLE fsl_rdb8315 - Freescale MPC8315ERDB

\sh NAME
'Freescale MPC8315ERDB'

INTRODUCTION
This section includes getting-started information, including subsections
detailing ROM installation, boot ROM flash instructions, and jumper
settings for VxWorks operation.

\sh Jumpers & Switches

There is no jumper to need be configured.

Default Switch Settings

\ts
Switch Number                           | Switch ON   | Switch OFF
------------------------------------------------------------------
SW3 (reset configuration source)        | 1,2,3,4     |
SW4 (REV config and NAND boot select)   |             | 1,2,3,4
\te

\sh Getting the board running VxWorks
This section will guide you how to run VxWorks on the Freescale MPC8315ERDB
board.

1. Creating a bootrom.bin:

    1.1 Boot from UBOOT

        1.1.1 Define BOOT_FROM_UBOOT in
            "$(WIND_BASE)/target/config/fsl_rdb8315/config.h".

        1.1.2 Modify $(WIND_BASE)/target/config/fsl_rdb8315/Makefile to enable
            the configuration of ROM_TEXT_ADRS for bootup from UBOOT.

        1.1.3 Launch VxWorks Development Shell, go to the BSP directory
            "$(WIND_BASE)/target/config/fsl_rdb8315".

        1.1.4 Type "make bootrom.bin" and press ENTER.

        1.1.5 Once the make process finish successfully, you will find
            the file "bootrom.bin" in the BSP directory
            "$(WIND_BASE)/target/config/fsl_rdb8315".

    1.2 Boot from VxWorks bootrom

        1.2.1 Launch VxWorks Development Shell, go to the BSP directory
            "$(WIND_BASE)/target/config/fsl_rdb8315".

        1.2.2 Type "make bootrom.bin" and press ENTER.

        1.2.3 Once the make process finish successfully, you will find
            the file "bootrom.bin" in the BSP directory
            "$(WIND_BASE)/target/config/fsl_rdb8315".

2.Flashing the VxWorks bootrom image

    This section will describe how to program VxWorks bootrom onto a flash.

    2.1 Using UBOOT Command:

        2.1.1 Starting a TFTP server

            Open a TFTP server on your host.  Make sure the root directory is
            your fsl_rdb8315 BSP directory which contains the VxWorks bootrom
            image you've just created.

        2.1.2 Configuring the U-Boot environment

            Connect the UART1 on your MPC8315ERDB board to the designated
            serial port of your host, start the terminal program, and power
            up your board. You should see messages like this:

\cs
            U-Boot 1.3.0-rc2 (Nov 19 2007 - 16:37:36) MPC83XX

            Reset Status:

            CPU:   e300c3, MPC8315E, Rev: 10 at 400 MHz, CSB:  133 MHz
            Board: Freescale MPC8315ERDB Rev 0.0
            I2C:   ready
            DRAM:  128 MB
            FLASH:  8 MB
            NAND:  32 MB
            In:    serial
            Out:   serial
            Err:   serial
            Net:   eTSEC0, eTSEC1
            Hit any key to stop autoboot:  0
\ce

            Type the following commands to setup the U-Boot environment.

\cs
            setenv ipaddr 192.168.0.3
            setenv netmask 255.255.255.0
            setenv serverip 192.168.0.2
            setenv gatewayip 192.168.0.1
\ce

            Note: you must change the network parameters according to your
            actual situation. 'ipaddr' is the target IP address while 'serverip'
            is your host IP address.

        2.1.3 Programming the flash

            Type the following commands in the U-Boot shell.

\cs
            tftp 4000000 bootrom.bin
            erase fe090000 fe0fffff
            cp.b 4000000 fe090000 $filesize
\ce

            Note: if the bootrom size exceeds 0x70000 (448KB), you should erase
            one or more sectors, for example:

\cs
            erase fe090000 fe16ffff.
\ce

        2.1.4 Running the VxWorks bootrom

            In the U-Boot shell prompt, type the following command:

\cs
            go fe090100
\ce

            Now you will get VxWorks bootrom running.

            Note: If you are programming VxWorks bootrom for the first time,
            it's strongly recommended that you should use the 'M' command
            provided by VxWorks bootrom to check and configure the ethernet MAC
            address, see the section "Ethernet Address" below for more details.

        2.1.5 Running the VxWorks bootrom automatically after power up/reset

            In the U-Boot shell prompt, type the following commands to enable
            the VxWorks bootrom to execute automatically after power up/reset:

\cs
            setenv bootcmd go fe090100
            saveenv
\ce

            To prevent the VxWorks bootrom from executing automatically, hit any
            key to stop U-Boot counting down.

    2.2 Using workbench:

        2.2.1 Install Wind River Probe or Wind River ICE and power it on.

            Connect the JTAG interface cable from the Wind River Probe or Wind
            River ICE to the MPC8315ERDB board's JTAG connector (P1).Once the
            connections have been made, power up the MPC8315ERDB board and
            launch Workbench on the host.

        2.2.2 Configure the Wind River Probe or Wind River ICE connection.

            In Workbench on the left pane, there is a "Remote Systems" window.
            Click on the "Define a connection to remote system" button. In the
            popup "New Connection" window, select the Connection type as
            "Wind River OCD ICE Connection" for Wind River ICE and "Wind River
            OCD Probe Connection" for Wind River Probe. If the Wind River ICE
            is connected via serial port, specify the configuration else select
            "Specify all communication settings manually".

            In the "Wind River ICE Settings" or "Wind River Probe Settings",
            click on the "Processor" radio button and select the appropriate
            processor type - MPC83XX/MPC8315E. Connect Workbench OCD with the
            Wind River Probe or Wind River ICE by clicking the "Next" and then
            "Finish" button. A New connection appears in the "Remote Systems"
            window.

        2.2.3 Program Wind River Probe / Wind River ICE with the proper register
            settings for the MPC8315ERDB board.

            Go to the "OCD Command Shell" and click on the "Settings" button.
            The OCD Command Shell Settings dialog appears, where you can select
            the register file - "Freescale_MPC8315E_RDB.reg" which locates in
            "$WIND_OCD_PATH\RegisterFiles\PowerPC\83xx\Freescale". After
            choosing the register file, press the "OK" button. In the OCD
            Command Shell, click the "Playback File" button. The selected
            register file is downloaded to the target and the commands from the
            file appear in the OCD command shell. When playback is finished the
            ">BKM>" or the ">ERR>" prompt returns.

        2.2.4 Get into Background Mode.

            Execute the "IN" command to reset the board and initialize it with
            the register setting.

\cs
            IN
\ce

        2.2.5 Program the Flash.

            In WindRiver OCD, Select the "Flash Programmer". The
            "Flash Programmer" view has three tabs: "Configuration",
            "Programming" and "Memory/Diagnostics".

            2.2.5.1 Select the "Configuration" tab. In the "Device Selection'
                field, select the "AMD -> S29GL064MR3 -> 4096 x 16 -> 1 Device".

                Note: The real FLASH type is AMD S29GL064A. But it is compatible
                With S29GL064MR3.

                In "Flash Bank Address" group for the "Base" enter "0xfe000000".
                In the "RAM Workspace" group for the "Workspace Start at" enter
                "0x00000000" and for the "Workspace Size" enter "0xffff".

            2.2.5.2 Click on the "Programming" tab. Select the "Add File"
                button, in the popup window, select the newly generated
                "$(WIND_BASE)/target/config/fsl_rdb8315/bootrom.bin", and click
                the "This is a raw binary file" checkbox then click "OK" to
                finish file adding. Click the "Start Address" and set it as
                "0xfe000000", the "End Address" will be fixed automatically.
                Please notice that the "Start Address" should include the
                "Offset bias". Enable a file by clicking on the checkbox under
                 the "Enabled" heading.

            2.2.5.3 Press the "Erase/Program" button to erase the flash and then
                program the flash with "bootrom.bin" file. A window pops up to
                show the progress of the Flash device programming. When it is
                complete, the Flash should contain the new boot program.

                Note:If the operation fails, you should run the following
                command in OCD command shell:

\cs
                cf rcw 42060000 A0606C00
                IN
\ce

FEATURES

This section describes all features of the board, supported or not.
It documents all configurations of the board and the interaction between
features and configuration items.

\sh List of Hardware Features (Freescale MPC8315E-RDB REVA2 board)

\ts
Hardware Interface   | Controller  | Driver/Component        | Status
---------------------------------------------------------------------
UART:0               | on-chip     | vxbNs16550Sio.c         | SUPPORTED
UART:1               | on-chip     | vxbNs16550Sio.c         | SUPPORTED
NOR-FLASH            | S29GL064A   | flashMem.c/sysMtd.c     | SUPPORTED
1GB-ETHERNET:1       | on-chip     | vxbEtsecEnd.c           | SUPPORTED
1GB-ETHERNET:2       | on-chip     | vxbEtsecEnd.c           | SUPPORTED
TIMER                | on-chip     | vxbPpcDecTimer.c        | SUPPORTED
TIMER                | on-chip     | vxbPpcQuiccTimer.c      | SUPPORTED
I2C                  | on-chip     | sysMotI2c.c             | SUPPORTED
RTC                  | on-board    | ds1339Rtc.c             | SUPPORTED
PCI-MASTER           | on-chip     | m83xxPci.c              | SUPPORTED
PCI-E-HOST           | on-chip     | m83xxPciEx.c            | SUPPORTED
USB2-HOST            | on-chip     | INCLUDE_EHCI            | SUPPORTED
SATA                 | on-chip     | vxbFslSataStorage.c     | SUPPORTED
SEC                  | on-chip     | ipfreescale             | SUPPORTED
EEPROM               | on-board    | N/A                     | UNSUPPORTED
Thermal Sensor       | on-board    | N/A                     | UNSUPPORTED
MCU                  | on-board    | N/A                     | UNSUPPORTED
Clock Generator      | on-board    | N/A                     | UNSUPPORTED
NAND-FLASH           | K9F5608     | N/A                     | UNSUPPORTED
miniPCI-MASTER       | on-chip     | N/A                     | UNSUPPORTED
miniPCI-E-HOST       | on-chip     | N/A                     | UNSUPPORTED
miniUSB2-HOST        | on-chip     | N/A                     | UNSUPPORTED
SPI/TDM              | on-chip     | N/A                     | UNSUPPORTED
\te

\sh Feature Interactions
Refer to the board vendor's documentation.

HARDWARE DETAILS
This section discusses memory maps for each bus and lists of interrupt levels
and/or vector numbers for each interrupting source.

\sh Verified Hardware
This BSP has been verified on REVA2 of Freescale MPC8315ERDB board. Other
revisions of the board are untested and unwarranted. The default clock speed for
MPC8315ERDB REVA2 is 400MHz core, 133MHz CSB.

\sh Memory Map

The following table describes the fsl_rdb8315 memory map:

\ts
   Start    | Size  |    End      | Access to
---------------------------------------------
0x0000_0000 | 128MB | 0x07FF_FFFF | DDR SDRAM
0x8000_0000 | 256MB | 0x8FFF_FFFF | PCI
0xA000_0000 | 512MB | 0xBFFF_FFFF | PCIEX2
0xE000_0000 | 1MB   | 0xE00F_FFFF | IMMR
0xFE00_0000 | 8MB   | 0xFE7F_FFFF | NOR Flash
\te

\sh Serial Configuration
In order to match the U-Boot, the serial baud rate of this BSP is set to 115200.
Default configuration is:

\ts
    Baud Rate   : 9600
    Data        : 8 bit
    Parity      : None
    Stop        : 1 bit
    Flow Control: None
\te

Note: The Baud Rate is 115200 when BOOT_FROM_UBOOT is defined in config.h.

\sh Network Configuration
The ETSEC ports allows 10/100/1000T connection. The driver will auto-negotiate
and configure the port accordingly.  are tested successfully with this BSP.

The BSP also supports Intel FEI8255x(PCI) and GEI8252x(PCI Express)
ethernet card via PCI and PCIe.

The following END driver is supported in this BSP.

\ts
Driver | END
------------
ETSEC  | INCLUDE_ETSEC_VXB_END
\te

\sh Security Engine
Freescale Security Engine (SEC) 3.3 is supported in this release.
VxWorks MSP must be installed to enable security engine offload.

The following steps describe how to enable SEC support of this BSP.

1. Create a VSB (VxWorks Source Build)

    1.1 Create a VSB project

        Open the VxWorks Development Shell, type the following command to create
        a VSB project based on fsl_rdb8315 BSP.

\cs
        vxprj vsb create -bsp fsl_rdb8315
\ce

        This command creates a VSB for the BSP fsl_rdb8315, vsb_fsl_rdb8315  is
        the name of this VSP.

    1.2 Configure VSB

        After run the command in step 1.1, you will be prompted to select the
        configuration options of this new VSB. Below is a example of
        configuration result:

\cs
        starting VSB configuration...
        *
        * VxWorks Source Build (VSB) Configuration
        *
        *
        * VxWorks Global Configuration Options for BSP fsl_rdb8315
        *
        Set advanced options  (ADVANCED_OPT) [N/y/?] (NEW) y
        *
        * fsl_rdb8315_CPU = PPC32
        *
        Select the Floating Point configuration
        > 1. hard (FP_hard) (NEW)
        choice[1]: 1
        Select the ENDIAN configuration
        > 1. big (ENDIAN_big) (NEW)
        choice[1]: 1
        Select the Primary Tool
        > 1. diab (PRI_TOOL_ILP32_diab) (NEW)
        choice[1]: 1
        optional compiler flags for fsl_rdb8315_TOOL [?]  (ADDEDCFLAGS) [] (NEW)
        Enable use of Secondary TOOL to build kernel libraries.  (ENABLE_TOOL2_ILP32) [Y/n/?] (NEW) Y
          Select the Secondary Tool
          > 1. gnu (SEC_TOOL_ILP32_gnu) (NEW)
          choice[1]: 1
        optional compiler flags for fsl_rdb8315_TOOL2 [?]  (ADDEDCFLAGS2) [] (NEW)
        Select the Applications Tool
        > 1. diab (APP_TOOL_ILP32_diab) (NEW)
          2. gnu (APP_TOOL_ILP32_gnu) (NEW)
        choice[1-2?]: 1
        optional compiler flags for fsl_rdb8315_APP_TOOL [?]  (ADDEDCFLAGS_APP) [] (NEW)
        *
        * ppc Architecture Options
        *
        Low-level arch code need not support inconsistent cache modes  (PPC_CACHE_MODE_IS_CONSISTENT) [N/y/?] (NEW)
        System Viewer Instrumentation  (SV_INSTRUMENTATION) [Y/n/?] (NEW) Y
        Global Debug Flag  (DEBUG_FLAG) [N/y/?] (NEW)
        Real-Time Process (RTP)  (RTP) [Y/n/?] (NEW) Y
        *
        * VxWorks Kernel Configuration Options
        *
        *
        * VxWorks Kernel Component Configuration
        *
        WIND Object Management  (OBJECT_MANAGEMENT) [Y/n/?] (NEW) Y
          WIND Object ID Validation  (OBJECT_VERIFICATION) [Y/n/?] (NEW) Y
        Task Create Hooks  (TASK_CREATE_HOOKS_D) [Y/n/?] (NEW) Y
        Task Switch Hooks  (TASK_SWITCH_HOOKS_D) [Y/n/?] (NEW) Y
        CPU Power Management  (CPU_PWR_MGMT_D) [Y/n/?] (NEW) Y
        *
        * Multi-OS Support
        *
        MIPC  (COMPONENT_MIPC) [Y/n/?] (NEW) n
        WRLOAD  (COMPONENT_WRLOAD) [Y/n/?] (NEW) n
        *
        * Optional Kernel Features
        *
        Enable Kernel Per-Task CWD  (PERTASK_CWD) [Y/n/?] (NEW)
        *
        * File System Configuration
        *
        Set Maximum Device Name Length  (MAX_DEVNAME) [10] (NEW)
        Optimize NFS3 server read/write procedure  (NFS3_RWOPT) [N/y/?] (NEW)
        Set factor for maximum block size transferred in NFS3 server  (NFS3_BLKSIZE_FACTOR) [1] (NEW)
        Enable VXTESTV2  (COMPONENT_VXTESTV2_D) [Y/n/?] (NEW)
        Enable BENCHMARK tests  (COMPONENT_BENCHMARK) [N/y/?] (NEW)
        Enable Code Coverage Analyzer test instrumentation of VSB   (COMPONENT_COVERAGE) [N/y/?] (NEW)
        *
        * VxWorks Applications Configuration Options
        *
        Select networking code to be built
        > 1. Build Networking IPNET Libraries (COMPONENT_IPNET) (NEW)
          2. No Networking Libraries (NO_IP) (NEW)
        choice[1-2]: 1
        *
        * Networking Build Options
        *
        Set the IPNET build mode
        > 1. speed mode (BUILD_MODE_speed) (NEW)
          2. debug mode (BUILD_MODE_debug) (NEW)
        choice[1-2]: 1
        Enable VERBOSE mode  (FEATURE_IPNET_VERBOSE) [N/y] (NEW) y
        Generate IPNET Dependencies  (FEATURE_IPNET_GEN_DEPEND) [Y/n] (NEW) Y
        Build basic IPNET support libraries  (BUILD_BASIC_IPNET) [Y/n/?] (NEW) Y
        Choose the Networking Libraries to be built
        > 1. Build libraries with IPV4 support (FEATURE_IPNET_INET4_ONLY) (NEW)
          2. Build libraries with IPV4 and IPV6 support (FEATURE_IPNET_INET6) (NEW)
          3. Build libraries with IPV6 support (FEATURE_IPNET_INET6_ONLY) (NEW)
        choice[1-3]: 1
        Select the default Build-time Syslog level for Networking Components
          1. Emergency level (IPCOM_DEFAULT_SYSLOG_PRIORITY_EMERG) (NEW)
          2. Critical level (IPCOM_DEFAULT_SYSLOG_PRIORITY_CRIT) (NEW)
          3. Error level (IPCOM_DEFAULT_SYSLOG_PRIORITY_ERR) (NEW)
        > 4. Warning level (IPCOM_DEFAULT_SYSLOG_PRIORITY_WARNING) (NEW)
          5. Notice level (IPCOM_DEFAULT_SYSLOG_PRIORITY_NOTICE) (NEW)
          6. Informational level (IPCOM_DEFAULT_SYSLOG_PRIORITY_INFO) (NEW)
          7. Debug level (IPCOM_DEFAULT_SYSLOG_PRIORITY_DEBUG) (NEW)
          8. Detailed debug level (IPCOM_DEFAULT_SYSLOG_PRIORITY_DEBUG2) (NEW)
        choice[1-8?]: 4
        Enable selection of Advanced Debugging Build Options for Networking Component   (IPCOM_DEBUG_ADVANCED) [N/y/?] (NEW)
        Enable MSP Feature Set PAD  (MSP_FEATURE_PAD) [Y/n/?] (NEW) n
        Enable MSP Feature Set PCD  (MSP_FEATURE_PCD) [Y/n/?] (NEW) n
        Enable MSP Feature Set PID  (MSP_FEATURE_PID) [Y/n/?] (NEW) n
        Enable MSP Feature Set PNE  (MSP_FEATURE_PNE) [Y/n/?] (NEW) Y
        *
        * VxWorks Networking Component Configuration
        *
        *
        * Layer 2 (Link) Components
        *
        Enable L2TP  (COMPONENT_IPL2TP) [N/y/?] (NEW)
        Enable MACsec  (COMPONENT_IPMACSEC) [N/y/?] (NEW)
        Enable PPP  (COMPONENT_IPPPP) [Y/n/?] (NEW)
        Enable 802.1ad VLAN stacking  (COMPONENT_VLAN_STACKING) [N/y/?] (NEW)
        Enable WLAN  (COMPONENT_WLAN) [N/y/?] (NEW)
        *
        * Layer 3 (Network) Components
        *
        Enable FIREWALL  (COMPONENT_IPFIREWALL) [N/y/?] (NEW)
        Enable IPSEC  (COMPONENT_IPIPSEC) [N/y/?] (NEW) y
        Enable MPLS  (COMPONENT_IPMPLS) [N/y] (NEW)
        Enable ROHC  (COMPONENT_IPROHC) [N/y/?] (NEW)
        Enable IPNET Network Address Translation (NAT)  (COMPONENT_NAT) [Y/n/?] (NEW) n
        Enable Quality of Service and Differentiated Services  (COMPONENT_DIFF_SERV) [Y/n/?] (NEW) n
        Enable tunneling support  (COMPONENT_TUNNEL_SUPPORT) [Y/n/?] (NEW) n
        *
        * Layer 4 (Transport) Components
        *
        Enable SCTP  (COMPONENT_IPSCTP) [N/y/?] (NEW)
        *
        * Layer 5 (Applications) Components
        *
        Enable 802.1X Authenticator  (COMPONENT_DOT1X) [N/y/?] (NEW)
        Enable 802.1X Supplicant  (COMPONENT_IP8021X) [N/y/?] (NEW)
        Enable APPL  (COMPONENT_IPAPPL) [Y/n/?] (NEW) Y
        Enable DHCPR  (COMPONENT_IPDHCPR) [N/y] (NEW)
        Enable DHCPS  (COMPONENT_IPDHCPS) [N/y/?] (NEW)
        *
        * Diameter Components
        *
        Enable DIAMETER Client  (COMPONENT_IPDIAMETERC) [N/y/?] (NEW)
        Enable DIAMETER Proxy  (COMPONENT_IPDIAMETERP) [N/y/?] (NEW)
        Enable IKE  (COMPONENT_IPIKE) [N/y/?] (NEW)
        Enable Multicast Proxy daemon  (COMPONENT_IPMCP) [N/y/?] (NEW)
        Enable MIP  (COMPONENT_IPMIP) [N/y/?] (NEW)
        Enable MIP4  (COMPONENT_IPMIP4) [N/y/?] (NEW)
        Enable MIPFA  (COMPONENT_IPMIPFA) [N/y/?] (NEW)
        Enable MIPHA  (COMPONENT_IPMIPHA) [N/y/?] (NEW)
        Enable MIPMN  (COMPONENT_IPMIPMN) [N/y/?] (NEW)
        Enable MIPPM  (COMPONENT_IPMIPPM) [N/y/?] (NEW)
        Enable RADIUS  (COMPONENT_IPRADIUS) [Y/n/?] (NEW) n
        Enable RIP  (COMPONENT_IPRIP) [N/y] (NEW)
        Enable SNMP  (COMPONENT_SNMP) [Y/n/?] (NEW) n
        Enable SNTP  (COMPONENT_IPSNTP) [Y/n/?] (NEW) n
        Enable SSH  (COMPONENT_IPSSH) [N/y/?] (NEW) y
        Enable SSL  (COMPONENT_IPSSL) [Y/n/?] (NEW) Y
        *
        * WPS requires COMPONENT_WLAN and COMPONENT_IPEAP and COMPONENT_IP8021X to be selected and COMPONENT_IPCRYPTO_USE_FIPS_140_2 to be deselected
        *
        *
        * Cryptography Components
        *
        *
        * Component CRYPTO preselected - required by  Component SSL
        *
        Enable CRYPTO  (COMPONENT_IPCRYPTO) [Y/?] (NEW) y
          Enable FIPS 140-2 validated crypto libraries  (COMPONENT_IPCRYPTO_USE_FIPS_140_2) [N/y/?] (NEW)
        Enable FREESCALE  (COMPONENT_IPFREESCALE) [N/y/?] (NEW) y
        Enable HWCRYPTO  (COMPONENT_IPHWCRYPTO) [N/y/?] (NEW) y
        *
        * Networking Library Components
        *
        Enable EAP  (COMPONENT_IPEAP) [N/y/?] (NEW)
        Enable VXCOMPAT  (COMPONENT_VXCOMPAT) [Y/n/?] (NEW) Y
        *
        * Networking Acceleration Platform Components
        *
        Enable IFPROXY  (COMPONENT_IFPROXY) [N/y/?] (NEW)
        Enable WRNAD  (COMPONENT_WRNAD) [N/y/?] (NEW)
        *
        * Common Analysis Framework Components
        *
        *
        * COMPONENT CAFE and COMPONENT_STACKTRACE are used by analysis tools
        *
        Enable CAFE framework  (COMPONENT_CAFE) [Y/n/?] (NEW) n
        *
        * Stacktrace Debug Component
        *
        Enable stacktrace debugging output  (COMPONENT_STACKTRACE_DEBUG) [N/y] (NEW)
        Route stacktrace debugging output to a session logger  (COMPONENT_STACKTRACE_SESSION_LOGGER) [N/y] (NEW)
        *
        * Target Communication Framework (TCF) Agent Component
        *
        Enable TCF_AGENT  (COMPONENT_TCF_AGENT) [Y/n/?] (NEW) n
        Enable WM  (COMPONENT_WM) [Y/n/?] (NEW) n
        Enable XML  (COMPONENT_XML) [Y/n/?] (NEW) Y
        *
        * VxWorks User Library Configuration
        *
        Build User-side libraries  (FEATURE_USR) [Y/n/?] (NEW) Y
          Choose the User Networking Libraries to be built
          > 1. Build libraries with IPV4 support (USR_INET4_ONLY) (NEW)
            2. Build libraries with IPV4 and IPV6 support (USR_INET6) (NEW)
            3. Build libraries with IPV6 support (USR_INET6_ONLY) (NEW)
          choice[1-3]: 1
          Build User Networking Libraries  (COMPONENT_USR_IPNET) [Y/n/?] (NEW) Y
          Build core USR APPS  (COMPONENT_USR_APPS) [Y/n/?] (NEW) Y
            Build test USR APPS  (COMPONENT_USR_TEST) [Y/n/?] (NEW) n
          Build USR libraries for DOT1X  (COMPONENT_USR_DOT1X) [N/y/?] (NEW)
          Build USR libraries for SNMP  (COMPONENT_USR_SNMP) [N/y/?] (NEW)
          Build USR libraries for WM  (COMPONENT_USR_WM) [N/y/?] (NEW)
          Build USR libraries for XML  (COMPONENT_USR_XML) [Y/n/?] (NEW) Y
          Build USR libraries for SNMP_V3  (COMPONENT_USR_SNMP_V3) [N/y/?] (NEW)
          Build USR libraries for SNMP_AGENTX  (COMPONENT_USR_SNMP_AGENTX) [N/y/?] (NEW)

        This VSB supports the following BSPs: fsl_rdb8315
\ce

        Note that 'Enable MSP Feature Set PNE' must be set to 'Yes' and other
        'Enable MSP Feature Set' must be set to 'No'. And some options like
        "Enable FREESCALE" are also required to test Freescale's SEC.

    1.3 Build VSB

        Run the following command in vsb_fsl_rdb8315 directory to build
        the VSB libraries.

\cs
        make
\ce

2. Create a VIP based on the new VSB

    2.1 Create a VIP, in the step of "Project Setup", select new VSB which is
        created above as the configuration of "A source build project", and
        select the correct BSP.

    2.2 Configure and build VIP

        In the Kernel Configuration editor include INCLUDE_IPFREESCALE.
        Set two parameters as follows:

\cs
        SEC2_CORE_VERSION = "3.3"
        SEC2_DEVICE_FAMILY = "3"
\ce

        Build vxWorks image of this VIP.

    2.3 Test the Security Engine

        Boot the target with the image file, and type the following command
        in the VxWorks target shell to test the security engine.

\cs
        -> ipcom_run_cmd "freescale test all"                                          
        freescale :: testing md5 hash...success                                        
        freescale :: testing md5 hmac...success                                        
        freescale :: testing sha1 hash...success                                       
        freescale :: testing sha1 hmac...success                                       
        freescale :: testing des cbc cipher...success                                  
        freescale :: testing des ecb cipher...success                                  
        freescale :: testing 3des cbc cipher...success                                 
        freescale :: testing 3des ecb cipher...success                                 
        freescale :: testing aes cbc cipher...success                                  
        freescale :: testing aes ecb cipher...success                                  
        freescale :: testing rng oper...success                                        
        freescale :: testing mod exp...success 
\ce

\sh Boot Devices
The supported boot devices are:

\ts
    `motetsec0' | - Primary Ethernet (10baseT, 100baseTX, or 1000baseT)
    `motetsec1' | - Secondary Ethernet (10baseT, 100baseTX, or 1000baseT)
    `fei'       | - Intel Pro100 Ethernet PCI adaptor when PCI bus is enabled
    `gei'       | - Intel Pro1000 Ethernet PCIe adaptor when PCIe bus is enabled
    `tffs'      | - TFFS when INCLUDE_TFFS is defined in config.h
\te

\sh Boot Methods
The boot methods are affected by the boot parameters.  If no password is
specified, RSH (remote shell) protocol is used.  If a password is specified,
FTP protocol is used, or, if the flag is set, TFTP protocol is used.

\sh PCI Access
There are one PCI slot and two MiniPCI slots on the Freescale MPC8315ERDB board,
but the MiniPCI slots are unsupported.

In order to support PCI devices in this BSP, please define DRV_PCIBUS_M83XX in
config.h.
The Intel 8255x Ethernet adapter is one of the tested PCI device supported in
this release. Define INCLUDE_FEI8255X_VXB_END in config.h to enable this device.

\sh PCI Express Access
There are one PCIe slot and one MiniPCIe slot on the Freescale MPC8315ERDB
 board, but the MiniPCIe slot is unsupported.

In order to support PCIe devices in this BSP, please define DRV_PCIBUS_M83XX_EX
in config.h.
The Intel 825xx Ethernet adapter is one of the tested PCI device supported in
this release. Define INCLUDE_GEI825XX_VXB_END in config.h to enable this device.

\sh SATA Support
There are 2 SATA interfaces on the Freescale MPC8315ERDB board.

In order to support the SATA interfaces, the macro DRV_STORAGE_FSLSATA must be
defined in config.h, then the relative macros will be defined automatically.
Below is an example to show how to format and then copy a file to SATA disk.

\cs
    devs
    dosfsDiskFormat "/s0p0:1"
    copy "vxWorks", "/s0p0:1/"
\ce

\sh RTC
The real-time clock used on the board is the Maxim Semiconductor DS1374. Address
and data are transferred serially through the I2C interface. The device exists
on the I2C bus 0. To use the device, define INCLUDE_I2C and INCLUDE_RTC in
config.h first. Then type the following commands.

\cs
    sysRtcShow
\ce

SPECIAL CONSIDERATIONS
This section identifies the unique characteristics of the board. It includes
all information needed by the user that does not fit in any other section.

\sh TrueFFS
The standard Wind River TrueFFS product is supported in this release.

This BSP uses the Spansion S29GL064A flash as the TrueFFS media.
The FLASH address space that is used as TrueFFS is 0xfe400000 - 0xfe7fffff.

Note: Bootloader and TFFS are sharing the same flash part, so please be very
careful because misusing of TFFS may damage the bootloader and cause the
board failure to boot up.

To use it, define INCLUDE_TFFS in config.h, then the following macros will be
included automatically.

\cs
    #define INCLUDE_DOSFS
    #define INCLUDE_DOSFS_MAIN
    #define INCLUDE_DOSFS_FAT
    #define INCLUDE_DOSFS_FMT
    #define INCLUDE_DOSFS_DIR_VFAT
    #define INCLUDE_DOSFS_DIR_FIXED
    #define INCLUDE_ERF
    #define INCLUDE_XBD
    #define INCLUDE_XBD_TRANS
    #define INCLUDE_XBD_BLK_DEV
    #define INCLUDE_DEVICE_MANAGER
    #define INCLUDE_FS_MONITOR
    #define INCLUDE_FS_EVENT_UTIL
    #define INCLUDE_TL_FTL
\ce

When using TrueFFS on a new FLASH for the first time, you should format and
configure the FLASH by using:

\cs
    sysTffsFormat ();
    usrTffsConfig (0, 0, "/tffs0");
\ce

If you are using DOSFS, please use

\cs
    dosfsDiskFormat ("/tffs0");     /@ For VxWorks 6.6 and later version @/
\ce

Note: If you are running these commands in the VxWorks target shell, please use

\cs
    sp sysTffsFormat
\ce

to format the FLASH as it would take long time to complete.

You should now be able to use VxWorks I/O and file system commands to access
the FLASH device as if it were a disk.  For example, you can copy a vxWorks
image from your host to TFFS by using file system 'copy'.  Of course, you should
define INCLUDE_DISK_UTIL in config.h first.

\cs
    copy ("vxWorks", "/tffs0/vxWorks");
\ce

If you want to use "/tffs0" as a boot device, you should follow the instructions:

For command line mode, make sure INCLUDE_TFFS is defined in config.h, re-build
a bootrom from the BSP directory under VxWorks Development Shell, and program
it into the flash chip.  Also make sure you have all the necessary file system
components defined in config.h.

For project mode with PROFILE_BOOTAPP profile under Workbench, you should make
sure to include the following components in the Kernel Configuration Window:

\cs
    INCLUDE_DOSFS
    INCLUDE_DOSFS_MAIN
    INCLUDE_DOSFS_FAT
    INCLUDE_DOSFS_FMT
    INCLUDE_DOSFS_DIR_VFAT
    INCLUDE_DOSFS_DIR_FIXED
    INCLUDE_ERF
    INCLUDE_XBD
    INCLUDE_XBD_TRANS
    INCLUDE_XBD_BLK_DEV
    INCLUDE_DEVICE_MANAGER
    INCLUDE_FS_MONITOR
    INCLUDE_FS_EVENT_UTIL
    INCLUDE_TFFS_MOUNT
\ce

Then right click the project, select "Build Options\Set Active Build Spec...",
check the "default_romCompress" box, you will see "vxWorks.bin(default_romCompress)"
item is listed in the project, right click it and select "Build Target", this
will generate a default_romCompress.bin in the project directory, program
it into the flash chip as a bootrom.

Below is an example by using /tffs as a boot device:

\cs
    boot device          : fs
    unit number          : 0
    processor number     : 0
    host name            : host
    file name            : /tffs0/vxWorks
\ce

\sh Ethernet Address
The Freescale MPC8315ERDB boards do not have unique Ethernet hardware addresses
assigned to each board. A unique address is absolutely necessary if the user
wishes to connect the board to a network. Thus, the user must provide a suitable
6-byte Ethernet address for each on-board network interface.

The definition of macro ETHERNET_MAC_HANDLER in config.h indicates the MAC
address is stored in NVRAM and alterable via the 'M' bootrom command. This
option allows only the last three bytes to be changed. To use this option,
open a console window and reset the hardware. When the bootrom banner appears
and the countdown starts, press any key to get the "[VxWorks Boot]:" prompt.
Type 'M' and follow the instructions.

\sh USB Host Support
USB Enhanced Host Controller (EHCD) driver has been integrated into this BSP,
to enable it, you should modify as follows:

For command line build, define INCLUDE_EHCI in config.h, this will include
the following items automatically: the EHCI host controller, bulk only mass
storage class driver and DOS file system. You can also add other USB class
drivers in config.h, then rebuild the bootrom or vxWorks image.

For project build under Workbench, in the Kernel Configuration Window of your
created VxWorks Image Project, add INCLUDE_EHCI component, which will
automatically include EHCI host controller driver, then add USB class drivers
which you want, then rebuild your project. For example:

To support USB mass storage device, you can include the following components:

\cs
    INCLUDE_USB_MS_BULKONLY
    INCLUDE_USB_MS_BULKONLY_INIT
    INCLUDE_DOSFS
    INCLUDE_DOSFS_MAIN
    INCLUDE_DOSFS_CHKDSK
    INCLUDE_DOSFS_FMT
    INCLUDE_FS_MONITOR
    INCLUDE_ERF
    INCLUDE_XBD
    INCLUDE_DEVICE_MANAGER
    INCLUDE_XBD_PART_LIB
    INCLUDE_DOSFS_FAT
    INCLUDE_DOSFS_DIR_VFAT
    INCLUDE_XBD_BLK_DEV
\ce

Note: Mass storage device has been verified on the target.

For more information, please refer to
\tb Wind River USB for VxWorks 6 PROGRAMMER'S GUIDE

\sh Make Targets
The make targets are listed as the names of object-format files. Append `.hex'
to each to derive a hex-format file name. Other images not listed here may not
be tested.

\ts
`bootrom'
`bootrom.bin'
`bootrom.hex'
`vxWorks' (with `vxWorks.sym')
`vxWorks.st'
\te

\sh BSP Bootloaders and Bootroms

\ts
Bootloader/Bootrom  | Status
----------------------------
U-Boot (pre-flashed)| SUPPORTED
bootrom             | SUPPORTED
bootrom_uncmp       | SUPPORTED
bootrom_res         | UNSUPPORTED
vxWorks             | SUPPORTED
vxWorks_rom         | SUPPORTED
vxWorks_romCompress | SUPPORTED
vxWorks_romResident | SUPPORTED
\te

\sh BSP Validated Tools

\ts
Tool                         | Connection/Type | Status
-------------------------------------------------------
Workbench Debugger           | ETHERNET/WDB    | SUPPORTED
Workbench System Viewer      | ETHERNET/WDB    | SUPPORTED
Workbench MemScope           | ETHERNET/WDB    | SUPPORTED
Workbench ProfileScope       | ETHERNET/WDB    | SUPPORTED
Workbench StethoScope        | ETHERNET/WDB    | SUPPORTED
Workbench CoverageScope      | ETHERNET/WDB    | SUPPORTED
Workbench Core File Analysis | ETHERNET/WDB    | UNVALIDATED
Workbench Sensor Points      | ETHERNET/WDB    | UNVALIDATED
Workbench OCD Debugger       | JTAG            | SUPPORTED
Workbench OCD Flash          | JTAG            | SUPPORTED
\te

\sh Known Problems
On the board, the NVRAM makes use of the only FLASH. When bootrom_res is used to
boot the target, the code runs on the FLASH, so the board will hang if you want
to modify the bootline and save it into the NVRAM because it will change the
status of the FLASH.

\sh Power-on Reset Initialization

The state of the chip post reset is controlled via the HRCW.

The hardware reset configuration word(HRCW) is set via programming a bootrom.

The default value of HRCW is 0x42060000(RCWL) and 0xA0606C00(RCWH). eTSECs
default is RGMII. 16bit flash is assumed. For more details see the board
manual and also MPC8315E Reference manual.

\sh SYSCLK Frequency
66MHz is supported

BOARD LAYOUT

The diagram below shows top view of jumpers and connectors relevant to
VxWorks configuration for MPC8315ERDB board.

\bs
  +----------------------------------------------------------------------+
  |                   +------------------------------------+             |
  |                P2 | ---------------------- ----------- |        +----+
  |+-+ +-+    PCI Slot+------------------------------------+        |    |
  || | | |                                    --------------+       |    |P19
  || | | |                                                | |       |    |
  || | | |                                        P4      | |       +----+
  || | | |         +-----------+                          | |          +-+
  || | | |         |           |                Mini PCI  | |          +-+S2
  |+-+ +-+         |           |                          | |          +-+
  |P6  P7          | MPC8315E  |                          | |          +-+S1
  |                |           |                          | |            |
  |                |           |              ------------+-+        +---+
  |                |           |                                     |   |
  |                +-----------+                                     |   |
  |                                                                  |   |P11
  |              +-------+ P1                                        |   |
  |    S3        +-------+                                           |   |
  | +--------+                        P14                            +---+
  | |        |        /--- --- --- --+---+                               |
  | +--------+        |              |   |                        +------+
  |                   |              |   |     P13                |      |
  |    S4             | Mini PCIe    |   |     PCIe               |      |P5
  | +--------+        |              |   |   +-------------+      |      |
  | |        |        |              +-+ |   |-------- ----|      +------+
  | +--------+        |              +-+ |   +-------------+             |
  |                   |              |   |                               |
  |                   \--- --- --- --+---+                               |
  |                                                                      |
  |                                                                      |
  +----------------------------------------------------------------------+
\be

Below is the front view of interface on board.
\bs
         +-----------------------------------------------+
         |                            P11                |
         |                 P5     +----------+           |
         |              +------+  | +------+ |           |
         |              |eTSEC1|  | | UART1| |     P19   |
         |  P12   P10   |      |  | +------+ |   +-----+ |
         |+----++----+  |------|  | +------+ |   | USB | |
         ||    ||    |  |eTSEC2|  | | UART2| |   |-----| |
         ||    ||    |  |      |  | +------+ |   | USB | |
         ++----++----+--+------+--+----------+---+-----+-+
\be
    Key:
    P1  14-pin COP/JTAG connector
    P2  3.3 V PCI Slot [IDSEL - AD16]
    P4  mini PCI Slot[IDSEL - AD15]
    P5  RJ-45 LAN connectors Enet0 (top), Enet1 (bottom)
    P6  SATA connector port 0
    P7  SATA connector port 1
    P10 Phone port 0
    P11 Dual UART connector. UART1 (top), UART2 (bottom)
    P12 Phone port 1
    P9  ATX type power supply connector
    P13 PCIe slot
    P14 mini PCIe slot
    P19 USB connector(two "A" receptacles)
    S1  System reset button. Resets the MPC8315E RDB
    S2  Power ON button. Press once to power ON/OFF

BIBLIOGRAPHY

\tb MPC8315E Reference Manual

\tb MPC8315E-RDB Reference Design User's Guide

\tb E300 Core Reference Manual

\tb PowerPC Microprocessor Family: The Programming Environments for 32-bit Microprocessors MPCFPE32B/AD

WEB RESOURCES

Much of the Freescale documentation can be found on line. The following
URL was correct at the time of writing for semiconductor area. You'll have to
search the documentation using processor name for specific documentation.

http://www.freescale.com/

SEE ALSO

\tb Workbench User's Guide: Getting Started

\tb VxWorks Programmer's Guide: Configuration

\tb VxWorks Programmer's Guide: Architecture Supplement
